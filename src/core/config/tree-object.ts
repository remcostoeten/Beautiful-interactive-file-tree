// This file is auto-generated. Do not edit manually.
export type FileExplorer = {
	name: string
	type: 'file' | 'directory'
	children?: FileExplorer[]
	content?: string
	language?: string
}

export const projectStructure: FileExplorer = {
	name: 'project-root',
	type: 'directory',
	children: [
		{
			name: 'components',
			type: 'directory',
			children: [
				{
					name: 'api-renderer.tsx',
					type: 'file',
					content:
						'import { cn } from "../lib/utils";\n\nimport * as Tooltip from \'@radix-ui/react-tooltip\';\nimport { AnimatePresence, motion } from \'framer-motion\';\nimport { Check, ChevronDown, Copy, ExternalLink, Search } from \'lucide-react\';\nimport { useEffect, useRef, useState } from \'react\';\nimport { Resizable } from \'react-resizable\';\nimport \'react-resizable/css/styles.css\';\n\nconst THEME_CONFIG = {\n  light: {\n    background: \'bg-white\',\n    border: \'border-gray-200\',\n    text: \'text-gray-900\',\n    secondaryText: \'text-gray-600\',\n    hover: \'hover:bg-gray-50\',\n    divider: \'divide-gray-200\',\n    input: {\n      background: \'bg-white\',\n      border: \'border-gray-200\',\n      focus: \'focus:border-blue-500 focus:ring-blue-500/20\',\n    },\n    code: \'text-purple-600\',\n    badge: {\n      default: \'bg-gray-100 text-gray-700 border-gray-200\',\n      required: \'text-red-600\',\n      beta: \'bg-blue-50 text-blue-600 border-blue-200\',\n      deprecated: \'bg-red-50 text-red-600 border-red-200\',\n      experimental: \'bg-amber-50 text-amber-600 border-amber-200\',\n    },\n    section: {\n      header: \'bg-white\',\n      description: \'text-gray-600\',\n    },\n    table: {\n      header: \'bg-gray-50\',\n      row: \'even:bg-gray-200/50\',\n    }\n  },\n  dark: {\n    background: \'bg-[#000000]\',\n    border: \'border-[#333333]\',\n    text: \'text-zinc-200\',\n    secondaryText: \'text-zinc-400\',\n    hover: \'hover:bg-[#1e1e1e]\',\n    divider: \'divide-[#333333]\',\n    input: {\n      background: \'bg-[#111111]\',\n      border: \'border-[#333333]\',\n      focus: \'focus:border-blue-500 focus:ring-blue-500/20\',\n    },\n    code: \'text-blue-400\',\n    badge: {\n      default: \'bg-[#1e1e1e] text-zinc-300 border-[#333333]\',\n      required: \'text-red-400\',\n      beta: \'bg-blue-500/10 text-blue-400 border-blue-500/20\',\n      deprecated: \'bg-red-500/10 text-red-400 border-red-500/20\',\n      experimental: \'bg-yellow-500/10 text-yellow-400 border-yellow-500/20\',\n    },\n    section: {\n      header: \'bg-[#111111]\',\n      description: \'text-zinc-400\',\n    },\n    table: {\n      header: \'bg-[#111111]\',\n      row: \'even:bg-[#111111]/50\',\n    }\n  },\n  system: {\n    background: \'dark:bg-zinc-900/50 bg-gray-50/80\',\n    border: \'dark:border-zinc-800 border-gray-200\',\n    text: \'dark:text-zinc-200 text-gray-900\',\n    secondaryText: \'dark:text-zinc-400 text-gray-600\',\n    hover: \'dark:hover:bg-zinc-800/50 hover:bg-gray-100/80\',\n    divider: \'dark:divide-zinc-800 divide-gray-200\',\n    input: {\n      background: \'dark:bg-zinc-900/50 bg-white/80\',\n      border: \'dark:border-zinc-800 border-gray-200\',\n      focus: \'focus:border-blue-500 focus:ring-blue-500/20\',\n    },\n    code: \'dark:text-purple-400 text-purple-700\',\n    badge: {\n      default: \'dark:bg-zinc-800/50 dark:text-zinc-300 dark:border-zinc-700 bg-white/80 text-gray-700 border-gray-200\',\n      required: \'dark:text-red-400 text-red-600\',\n      beta: \'dark:bg-blue-500/10 dark:text-blue-400 dark:border-blue-500/20 bg-blue-50/80 text-blue-700 border-blue-200\',\n      deprecated: \'dark:bg-red-500/10 dark:text-red-400 dark:border-red-500/20 bg-red-50/80 text-red-700 border-red-200\',\n      experimental: \'dark:bg-yellow-500/10 dark:text-yellow-400 dark:border-yellow-500/20 bg-amber-50/80 text-amber-700 border-amber-200\',\n    },\n    section: {\n      header: \'dark:bg-zinc-900/70 bg-white/80\',\n      description: \'dark:text-zinc-400 text-gray-600\',\n    },\n    table: {\n      header: \'dark:bg-zinc-900/90 bg-white/90\',\n      row: \'dark:even:bg-zinc-800/30 even:bg-gray-50/50\',\n    }\n  },\n} as const;\n\n/**\n * Configuration for different spacing options in the component\n */\nconst SPACING_CONFIG = {\n  section: {\n    compact: \'space-y-2\',\n    normal: \'space-y-6\',\n    relaxed: \'space-y-8\',\n  },\n  prop: {\n    none: \'divide-y-0 [&_td]:py-2\',\n    tight: \'divide-y [&_td]:py-2\',\n    normal: \'divide-y [&_td]:py-4\',\n    relaxed: \'divide-y [&_td]:py-6\',\n  }\n} as const;\n\n/**\n * Represents a possible value for a prop with optional description\n */\ntype PropValue = {\n  value: string;\n  description?: string;\n}\n\n/**\n * Represents a single property item in the API documentation\n */\ntype PropItem = {\n  /** The name of the property */\n  name: string;\n  /** The type definition of the property */\n  type: string;\n  /** Description of what the property does */\n  description: string;\n  /** Whether the property is required */\n  required?: boolean;\n  /** Default value if not specified */\n  defaultValue?: string;\n  /** External documentation link */\n  link?: string;\n  /** Whether the property is deprecated */\n  deprecated?: boolean;\n  /** Version when the property was introduced */\n  since?: string;\n  /** Example usage of the property */\n  example?: string;\n  /** Whether the property is in beta */\n  beta?: boolean;\n  /** Whether the property is experimental */\n  experimental?: boolean;\n  /** Possible values for enum/union types */\n  values?: PropValue[];\n  /** Additional notes or warnings */\n  notes?: string[];\n  /** Code snippets demonstrating usage */\n  codeSnippets?: Array<{\n    language: string;\n    code: string;\n    description?: string;\n  }>;\n  /** Related properties */\n  relatedProps?: string[];\n  /** Version history */\n  changelog?: Array<{\n    version: string;\n    changes: string;\n  }>;\n}\n\n/**\n * Represents a section of properties in the documentation\n */\ntype Section = {\n  /** Section title */\n  title: string;\n  /** Section description */\n  description: string;\n  /** Properties in this section */\n  props: PropItem[];\n  /** Whether the section should be expanded by default */\n  expandedByDefault?: boolean;\n  /** Optional icon for the section */\n  icon?: React.ReactNode;\n  /** Whether the section is in beta */\n  beta?: boolean;\n}\n\n/**\n * Props for the PropsTable component\n */\ntype PropsTableProps = {\n  /** Array of sections containing props */\n  sections: Section[];\n  /** Whether to show the type column */\n  showTypeColumn?: boolean;\n  /** Whether to show the default value column */\n  showDefaultColumn?: boolean;\n  /** Additional className for the container */\n  className?: string;\n  /** Whether to show the search input */\n  searchable?: boolean;\n  /** Whether sections can be collapsed */\n  collapsible?: boolean;\n  /** Whether to show the copy button */\n  showCopyButton?: boolean;\n  /** Whether to show version badges */\n  showVersionBadges?: boolean;\n  /** Whether to show beta badges */\n  showBetaBadges?: boolean;\n  /** Initial theme setting */\n  initialTheme?: ThemeOption;\n  /** Initial section spacing */\n  initialSpacing?: SpacingOption;\n  /** Initial prop spacing */\n  initialPropSpacing?: PropSpacingOption;\n  /** Callback when a prop is clicked */\n  onPropClick?: (propName: string) => void;\n  /** Custom badges configuration */\n  customBadges?: Record<string, {\n    text: string;\n    className: string;\n  }>;\n}\n\nconst SECTION_ANIMATION = {\n  initial: { opacity: 0, y: 10 },\n  animate: { opacity: 1, y: 0 },\n  transition: { duration: 0.2, ease: "easeOut" }\n} as const;\n\ntype ThemeOption = keyof typeof THEME_CONFIG;\ntype SpacingOption = keyof typeof SPACING_CONFIG.section;\ntype PropSpacingOption = keyof typeof SPACING_CONFIG.prop;\n\ntype SettingsState = {\n  theme: ThemeOption;\n  spacing: SpacingOption;\n  propSpacing: PropSpacingOption;\n}\n\n// Add these animation constants\nconst POPOVER_ANIMATION = {\n  initial: { opacity: 0, scale: 0.95 },\n  animate: { opacity: 1, scale: 1 },\n  exit: { opacity: 0, scale: 0.95 },\n  transition: { duration: 0.2, ease: "easeOut" }\n} as const;\n\nconst STAGGER_ANIMATION = {\n  initial: { opacity: 0, y: 10 },\n  animate: { opacity: 1, y: 0 },\n  transition: { duration: 0.2, ease: "easeOut" }\n} as const;\n\nconst STAGGER_CONTAINER = {\n  animate: {\n    transition: {\n      staggerChildren: 0.1\n    }\n  }\n} as const;\n\n// Update the COLUMN_WIDTHS constant with more consistent widths\nconst COLUMN_WIDTHS = {\n  prop: \'w-[220px] min-w-[220px] max-w-[220px] truncate\',\n  type: \'w-[220px] min-w-[220px] max-w-[220px] truncate\',\n  default: \'w-[160px] min-w-[160px] max-w-[160px] truncate\', // Slightly smaller for default values\n  description: \'w-full min-w-[220px]\', // Same base width as others\n  actions: \'w-[40px] min-w-[40px] max-w-[40px]\'\n} as const;\n\n// Note: To implement draggable columns, we would need to:\n// 1. Add react-resizable or similar library\n// 2. Track column widths in state\n// 3. Add resize handlers\n// 4. Store preferences in localStorage\n\n// Example implementation structure (to be implemented later):\n/*\ntype ColumnWidth = {\n  prop: number;\n  type: number;\n  default: number;\n  description: number;\n};\n\nconst [columnWidths, setColumnWidths] = useState<ColumnWidth>(() => {\n  // Load from localStorage or use defaults\n  return {\n    prop: 220,\n    type: 220,\n    default: 160,\n    description: 220\n  };\n});\n\n// Add resize handlers to th elements\n<th \n  className={...}\n  style={{ width: columnWidths.prop }}\n  // Add resize handlers here\n>\n*/\n\nconst DETAILS_ANIMATION = {\n  initial: {\n    height: 0,\n    opacity: 0,\n    scale: 0.98,\n    transformOrigin: "top"\n  },\n  animate: {\n    height: "auto",\n    opacity: 1,\n    scale: 1,\n    transformOrigin: "top"\n  },\n  exit: {\n    height: 0,\n    opacity: 0,\n    scale: 0.98,\n    transformOrigin: "top"\n  },\n  transition: {\n    height: {\n      duration: 0.25,\n      ease: [0.32, 0.72, 0, 1]\n    },\n    opacity: {\n      duration: 0.15,\n      ease: "easeOut"\n    },\n    scale: {\n      duration: 0.15,\n      ease: "easeOut"\n    }\n  }\n} as const;\n\n// Add this type near other type definitions\ntype PillProps = {\n  variant?: \'default\' | \'info\' | \'success\' | \'warning\' | \'error\' | \'beta\';\n  children: React.ReactNode;\n  className?: string;\n}\n\n// Add this component near other component definitions\nfunction Pill({ variant = \'default\', children, className }: PillProps) {\n  const variants = {\n    default: \'bg-[#1e1e1e] text-zinc-300 border-[#333333]\',\n    info: \'bg-blue-500/10 text-blue-400 border-blue-500/20\',\n    success: \'bg-green-500/10 text-green-400 border-green-500/20\',\n    warning: \'bg-yellow-500/10 text-yellow-400 border-yellow-500/20\',\n    error: \'bg-red-500/10 text-red-400 border-red-500/20\',\n    beta: \'bg-purple-500/10 text-purple-400 border-purple-500/20\',\n  };\n\n  return (\n    <span className={cn(\n      "text-xs px-2 py-0.5 rounded-full border shrink-0 whitespace-nowrap",\n      variants[variant],\n      className\n    )}>\n      {children}\n    </span>\n  );\n}\n\n// Add this component definition before the PropsTable component\ntype TruncatedTextProps = {\n  text: string;\n  className?: string;\n}\n\nfunction TruncatedText({ text, className }: TruncatedTextProps) {\n  const [isTruncated, setIsTruncated] = useState(false);\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragStart, setDragStart] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const element = textRef.current;\n    if (element) {\n      setIsTruncated(element.scrollWidth > element.clientWidth);\n    }\n  }, [text]);\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    setIsDragging(true);\n    setDragStart(e.clientX - scrollLeft);\n  };\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (!isDragging || !containerRef.current || !textRef.current) return;\n\n    const x = e.clientX - dragStart;\n    const maxScroll = textRef.current.scrollWidth - containerRef.current.clientWidth;\n    const newScrollLeft = Math.max(Math.min(0, x), -maxScroll);\n\n    setScrollLeft(newScrollLeft);\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n  };\n\n  const handleMouseLeave = () => {\n    if (isDragging) {\n      setIsDragging(false);\n    }\n  };\n\n  useEffect(() => {\n    setScrollLeft(0);\n  }, [text]);\n\n  if (!isTruncated) {\n    return <span ref={textRef} className={className}>{text}</span>;\n  }\n\n  const Content = () => (\n    <div\n      ref={containerRef}\n      className={cn(\n        "relative overflow-hidden cursor-grab active:cursor-grabbing",\n        isDragging && "select-none"\n      )}\n      onMouseDown={handleMouseDown}\n      onMouseMove={handleMouseMove}\n      onMouseUp={handleMouseUp}\n      onMouseLeave={handleMouseLeave}\n    >\n      <motion.div\n        animate={{ x: scrollLeft }}\n        transition={{ type: "spring", bounce: 0 }}\n        drag="x"\n        dragConstraints={{\n          left: containerRef.current ?\n            -1 * ((textRef.current?.scrollWidth || 0) - (containerRef.current?.clientWidth || 0)) :\n            0,\n          right: 0\n        }}\n        dragElastic={0.1}\n        dragMomentum={false}\n        className="cursor-grab active:cursor-grabbing"\n      >\n        <span\n          ref={textRef}\n          className={cn(className, "whitespace-nowrap inline-block")}\n        >\n          {text}\n        </span>\n      </motion.div>\n      {isTruncated && (\n        <div className="absolute inset-y-0 right-0 w-8 bg-gradient-to-l from-zinc-900 to-transparent pointer-events-none" />\n      )}\n    </div>\n  );\n\n  return (\n    <Tooltip.Provider delayDuration={300}>\n      <Tooltip.Root>\n        <Tooltip.Trigger asChild>\n          <div className="w-full">\n            <Content />\n          </div>\n        </Tooltip.Trigger>\n        <Tooltip.Portal>\n          <Tooltip.Content\n            className="z-50 px-3 py-1.5 text-sm bg-zinc-900 text-zinc-200 rounded-lg shadow-xl border border-zinc-800 max-w-xs break-words animate-in fade-in-0 zoom-in-95"\n            side="top"\n            sideOffset={4}\n          >\n            {text}\n            <Tooltip.Arrow className="fill-zinc-900" />\n          </Tooltip.Content>\n        </Tooltip.Portal>\n      </Tooltip.Root>\n    </Tooltip.Provider>\n  );\n}\n\n// Add this type for column widths\ntype ColumnWidth = {\n  prop: number;\n  type: number;\n  default: number;\n  description: number;\n  actions: number;\n};\n\n// Add this helper component for the draggable badges container\nfunction DraggableBadges({\n  children,\n  className\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isTruncated, setIsTruncated] = useState(false);\n  const dragStartTime = useRef<number>(0);\n\n  // Check if content is truncated\n  useEffect(() => {\n    const element = containerRef.current;\n    if (element) {\n      setIsTruncated(element.scrollWidth > element.clientWidth);\n    }\n  }, [children]);\n\n  const Content = () => (\n    <div\n      ref={containerRef}\n      className={cn(\n        "relative overflow-hidden",\n        isDragging && "select-none",\n        className\n      )}\n      onClick={(e) => {\n        // Prevent click propagation if we were dragging\n        if (isDragging || Date.now() - dragStartTime.current < 200) {\n          e.stopPropagation();\n        }\n      }}\n    >\n      <motion.div\n        drag={isTruncated ? "x" : false}\n        dragConstraints={containerRef}\n        dragElastic={0.1}\n        dragMomentum={false}\n        onDragStart={() => {\n          setIsDragging(true);\n          dragStartTime.current = Date.now();\n        }}\n        onDragEnd={() => {\n          setIsDragging(false);\n          // Keep dragStartTime for a short while to prevent click\n        }}\n        className={cn(\n          "flex items-center gap-1",\n          isTruncated && "cursor-grab active:cursor-grabbing"\n        )}\n      >\n        {children}\n      </motion.div>\n      {isTruncated && (\n        <div className="absolute inset-y-0 right-0 w-8 bg-gradient-to-l from-zinc-900 to-transparent pointer-events-none" />\n      )}\n    </div>\n  );\n\n  // Show tooltip only if content is truncated\n  if (!isTruncated) {\n    return <Content />;\n  }\n\n  return (\n    <Tooltip.Provider delayDuration={300}>\n      <Tooltip.Root>\n        <Tooltip.Trigger asChild>\n          <div className="w-full">\n            <Content />\n          </div>\n        </Tooltip.Trigger>\n        <Tooltip.Portal>\n          <Tooltip.Content\n            className="z-50 px-3 py-1.5 text-sm bg-zinc-900 text-zinc-200 rounded-lg shadow-xl border border-zinc-800 max-w-xs break-words animate-in fade-in-0 zoom-in-95"\n            side="top"\n            sideOffset={4}\n          >\n            <div className="flex flex-wrap gap-1">\n              {children}\n            </div>\n            <Tooltip.Arrow className="fill-zinc-900" />\n          </Tooltip.Content>\n        </Tooltip.Portal>\n      </Tooltip.Root>\n    </Tooltip.Provider>\n  );\n}\n\n// Add this helper function at the top level\nconst getInitialColumnWidths = (): ColumnWidth => ({\n  prop: 220,\n  type: 220,\n  default: 160,\n  description: 300,\n  actions: 40\n});\n\nexport default function PropsTable({\n  sections,\n  showTypeColumn = true,\n  showDefaultColumn = true,\n  className,\n  searchable = true,\n  collapsible = true,\n  showVersionBadges = true,\n  showBetaBadges = true,\n  initialTheme = \'dark\',\n  initialSpacing = \'normal\',\n  initialPropSpacing = \'normal\',\n  onPropClick,\n  customBadges,\n}: PropsTableProps) {\n  const [searchQuery, setSearchQuery] = useState(\'\');\n  const [copiedProp, setCopiedProp] = useState<string | null>(null);\n  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>(\n    sections.reduce((acc, section) => ({\n      ...acc,\n      [section.title]: section.expandedByDefault ?? true\n    }), {})\n  );\n\n  const currentTheme = THEME_CONFIG[initialTheme];\n\n  // Update the columnWidths state in PropsTable component\n  const [columnWidths, setColumnWidths] = useState<ColumnWidth>(getInitialColumnWidths());\n\n  // Add this effect to load from localStorage only on client side\n  useEffect(() => {\n    // Only run on client side\n    if (typeof window !== \'undefined\') {\n      const saved = localStorage.getItem(\'api-renderer-column-widths\');\n      if (saved) {\n        try {\n          const parsed = JSON.parse(saved);\n          setColumnWidths(parsed);\n        } catch {\n          console.error(\'Failed to parse saved column widths\');\n        }\n      }\n    }\n  }, []); // Run once on mount\n\n  // Update the save effect to only run on client side\n  useEffect(() => {\n    if (typeof window !== \'undefined\') {\n      localStorage.setItem(\'api-renderer-column-widths\', JSON.stringify(columnWidths));\n    }\n  }, [columnWidths]);\n\n  // Handle column resize\n  const onResize = (column: keyof ColumnWidth) => (_e: React.SyntheticEvent, { size }: { size: { width: number } }) => {\n    setColumnWidths(prev => ({\n      ...prev,\n      [column]: Math.max(size.width, 100)\n    }));\n  };\n\n  // Resizable column header component\n  const ResizableHeader = ({\n    column,\n    children\n  }: {\n    column: keyof ColumnWidth;\n    children: React.ReactNode;\n  }) => (\n    <Resizable\n      width={columnWidths[column]}\n      height={0}\n      handle={\n        <div\n          className="absolute right-0 top-0 h-full w-2 cursor-col-resize group"\n          style={{ touchAction: \'none\' }}\n        >\n          <div className="h-full w-1 group-hover:bg-blue-500/50 transition-colors" />\n        </div>\n      }\n      onResize={onResize(column)}\n      draggableOpts={{ enableUserSelectHack: false }}\n    >\n      <th\n        className={cn(\n          "px-6 py-3 text-left text-xs font-medium uppercase tracking-wider relative",\n          currentTheme.secondaryText\n        )}\n        style={{ width: columnWidths[column] }}\n      >\n        {children}\n      </th>\n    </Resizable>\n  );\n\n  const filterProps = (props: PropItem[]) => {\n    if (!searchQuery) return props;\n    return props.filter(prop =>\n      prop.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      prop.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      prop.type.toLowerCase().includes(searchQuery.toLowerCase())\n    );\n  };\n\n  const handleCopy = (text: string, propName: string) => {\n    navigator.clipboard.writeText(text);\n    setCopiedProp(propName);\n    setTimeout(() => setCopiedProp(null), 2000);\n  };\n\n  return (\n    <div className={cn(\n      \'w-full rounded-xl backdrop-blur-sm border\',\n      SPACING_CONFIG.section[initialSpacing],\n      currentTheme.background,\n      currentTheme.border,\n      className\n    )}>\n      <div className="flex items-center justify-between mb-4">\n        {searchable && (\n          <div className="relative flex-1">\n            <Search\n              className={cn("absolute left-3 top-1/2 transform -translate-y-1/2", currentTheme.secondaryText)}\n              size={16}\n            />\n            <input\n              type="text"\n              placeholder="Search props..."\n              className={cn(\n                "w-full pl-10 pr-4 py-3 rounded-lg text-sm transition-colors",\n                currentTheme.input.background,\n                currentTheme.input.border,\n                currentTheme.input.focus,\n                currentTheme.text\n              )}\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n            />\n          </div>\n        )}\n      </div>\n\n      {sections.map((section, sectionIndex) => {\n        const filteredProps = filterProps(section.props);\n        if (filteredProps.length === 0) return null;\n\n        return (\n          <motion.div\n            key={sectionIndex}\n            {...SECTION_ANIMATION}\n            className={cn(\n              "rounded-xl border overflow-hidden",\n              currentTheme.border,\n              currentTheme.background\n            )}\n          >\n            <div\n              className={cn(\n                "px-6 py-4 border-b transition-colors",\n                currentTheme.border,\n                currentTheme.section.header,\n                collapsible && "cursor-pointer",\n                collapsible && currentTheme.hover\n              )}\n              onClick={() => collapsible && setExpandedSections(prev => ({\n                ...prev,\n                [section.title]: !prev[section.title]\n              }))}\n            >\n              <div className="flex items-center justify-between">\n                <div>\n                  <h3 className={cn("text-lg font-medium", currentTheme.text)}>\n                    {section.title}\n                  </h3>\n                  {section.description && (\n                    <p className={cn("mt-1 text-sm", currentTheme.secondaryText)}>\n                      {section.description}\n                    </p>\n                  )}\n                </div>\n                {collapsible && (\n                  <ChevronDown\n                    className={cn(\n                      "transform transition-transform duration-300",\n                      currentTheme.secondaryText,\n                      expandedSections[section.title] ? "rotate-180" : ""\n                    )}\n                    size={20}\n                  />\n                )}\n              </div>\n            </div>\n\n            <AnimatePresence initial={false}>\n              {(!collapsible || expandedSections[section.title]) && (\n                <motion.div\n                  key={`${section.title}-content`}\n                  initial={{ height: 0, opacity: 0 }}\n                  animate={{\n                    height: "auto",\n                    opacity: 1,\n                    transition: {\n                      height: { duration: 0.3, ease: [0.04, 0.62, 0.23, 0.98] },\n                      opacity: { duration: 0.2, delay: 0.1 }\n                    }\n                  }}\n                  exit={{\n                    height: 0,\n                    opacity: 0,\n                    transition: {\n                      height: { duration: 0.3, ease: [0.04, 0.62, 0.23, 0.98] },\n                      opacity: { duration: 0.2 }\n                    }\n                  }}\n                  className="overflow-hidden"\n                >\n                  <div className="overflow-x-auto">\n                    <table className="w-full min-w-full table-fixed">\n                      <thead>\n                        <tr className={cn(\n                          "border-b transition-colors",\n                          currentTheme.border,\n                          currentTheme.table.header\n                        )}>\n                          <ResizableHeader column="prop">\n                            Prop\n                          </ResizableHeader>\n                          {showTypeColumn && (\n                            <ResizableHeader column="type">\n                              Type\n                            </ResizableHeader>\n                          )}\n                          {showDefaultColumn && (\n                            <ResizableHeader column="default">\n                              Default\n                            </ResizableHeader>\n                          )}\n                          <ResizableHeader column="description">\n                            Description\n                          </ResizableHeader>\n                          <th className={cn(\n                            "px-6 py-3 text-left text-xs font-medium uppercase tracking-wider",\n                            currentTheme.secondaryText,\n                            COLUMN_WIDTHS.actions\n                          )}>\n                            {/* Empty header for actions column */}\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody className={cn(\n                        SPACING_CONFIG.prop[initialPropSpacing],\n                        currentTheme.divider\n                      )}>\n                        {filteredProps.map((prop, propIndex) => (\n                          <tr\n                            key={propIndex}\n                            className={cn(\n                              "group transition-colors",\n                              currentTheme.hover,\n                              currentTheme.table.row,\n                              prop.deprecated && "opacity-60"\n                            )}\n                            onClick={() => onPropClick?.(prop.name)}\n                          >\n                            <PropTableRow\n                              prop={prop}\n                              showTypeColumn={showTypeColumn}\n                              showDefaultColumn={showDefaultColumn}\n                              showVersionBadges={showVersionBadges}\n                              showBetaBadges={showBetaBadges}\n                              copiedProp={copiedProp}\n                              onCopy={handleCopy}\n                              customBadges={customBadges}\n                              theme={initialTheme}\n                              columnWidths={columnWidths}\n                            />\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </motion.div>\n        );\n      })}\n    </div>\n  );\n}\n\n// Separate component for the table row to keep the code organized\ntype PropTableRowProps = {\n  prop: PropItem;\n  showTypeColumn: boolean;\n  showDefaultColumn: boolean;\n  showVersionBadges: boolean;\n  showBetaBadges: boolean;\n  copiedProp: string | null;\n  onCopy: (text: string, propName: string) => void;\n  customBadges?: Record<string, { text: string; className: string; }>;\n  theme: ThemeOption;\n  columnWidths: ColumnWidth;\n}\n\nfunction PropTableRow({\n  prop,\n  showTypeColumn,\n  showDefaultColumn,\n  showVersionBadges,\n  showBetaBadges,\n  copiedProp,\n  onCopy,\n  customBadges,\n  theme,\n  columnWidths,\n}: PropTableRowProps) {\n  const [showDetails, setShowDetails] = useState(false);\n  const currentTheme = THEME_CONFIG[theme];\n\n  return (\n    <>\n      <td style={{ width: columnWidths.prop }} className="px-6 py-4">\n        <div className="flex items-center gap-2 overflow-hidden">\n          <TruncatedText\n            text={prop.name}\n            className={cn(\n              "font-mono text-sm truncate shrink-0",\n              currentTheme.text\n            )}\n          />\n          <DraggableBadges>\n            {prop.required && (\n              <span className="text-xs text-red-400 shrink-0">*</span>\n            )}\n            {prop.type === \'function\' && (\n              <Pill variant="info">Function</Pill>\n            )}\n            {prop.type.includes(\'[]\') && (\n              <Pill variant="info">Array</Pill>\n            )}\n            {prop.deprecated && (\n              <Pill variant="error">Deprecated</Pill>\n            )}\n            {showVersionBadges && prop.since && (\n              <Pill variant="success">v{prop.since}</Pill>\n            )}\n            {showBetaBadges && prop.beta && (\n              <Pill variant="beta">Beta</Pill>\n            )}\n            {prop.experimental && (\n              <Pill variant="warning">Experimental</Pill>\n            )}\n            {prop.type.includes(\'Promise\') && (\n              <Pill variant="info">Async</Pill>\n            )}\n            {customBadges && Object.entries(customBadges).map(([key, badge]) => (\n              prop[key as keyof PropItem] && (\n                <Pill key={key} className={badge.className}>\n                  {badge.text}\n                </Pill>\n              )\n            ))}\n          </DraggableBadges>\n        </div>\n      </td>\n      {showTypeColumn && (\n        <td style={{ width: columnWidths.type }} className="px-6 py-4">\n          <div className="overflow-hidden">\n            <TruncatedText\n              text={prop.type}\n              className={cn(\n                "font-mono text-sm block truncate",\n                currentTheme.code\n              )}\n            />\n          </div>\n        </td>\n      )}\n      {showDefaultColumn && (\n        <td style={{ width: columnWidths.default }} className="px-6 py-4">\n          <div className="overflow-hidden">\n            <TruncatedText\n              text={prop.defaultValue || \'-\'}\n              className={cn(\n                "font-mono text-sm block truncate",\n                currentTheme.secondaryText\n              )}\n            />\n          </div>\n        </td>\n      )}\n      <td style={{ width: columnWidths.description }} className="px-6 py-4">\n        <div className="space-y-2">\n          <div className="flex items-start gap-2">\n            <span className={cn(\n              "text-sm line-clamp-2",\n              currentTheme.secondaryText\n            )}>\n              {prop.description}\n            </span>\n            {prop.link && (\n              <a\n                href={prop.link}\n                target="_blank"\n                rel="noopener noreferrer"\n                className="text-blue-400 hover:text-blue-300 transition-colors shrink-0"\n              >\n                <ExternalLink size={14} />\n              </a>\n            )}\n          </div>\n\n          {/* Expandable details section */}\n          {(prop.example || prop.notes?.length || prop.values?.length || prop.changelog?.length) && (\n            <button\n              onClick={() => setShowDetails(!showDetails)}\n              className="text-xs text-blue-400 hover:text-blue-300 transition-colors"\n            >\n              {showDetails ? \'Hide details\' : \'Show details\'}\n            </button>\n          )}\n\n          <AnimatePresence initial={false} mode="sync">\n            {showDetails && (\n              <motion.div\n                {...DETAILS_ANIMATION}\n                className="overflow-hidden"\n                layout\n              >\n                <motion.div\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  <div className="space-y-3 pt-2">\n                    {prop.example && (\n                      <div className="text-sm font-mono p-2 rounded bg-zinc-800/50 border border-zinc-700">\n                        {prop.example}\n                      </div>\n                    )}\n\n                    {prop.values && prop.values.length > 0 && (\n                      <div className="space-y-1">\n                        <h4 className="text-xs font-medium text-zinc-400">\n                          <Pill variant="default">Possible Values</Pill>\n                        </h4>\n                        <div className="grid grid-cols-2 gap-2">\n                          {prop.values.map((value, index) => (\n                            <div key={index} className="text-sm">\n                              <code className="text-purple-400">{value.value}</code>\n                              {value.description && (\n                                <p className="text-zinc-500 text-xs mt-1">{value.description}</p>\n                              )}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {prop.notes && prop.notes.length > 0 && (\n                      <div className="space-y-2">\n                        {prop.notes.map((note, index) => (\n                          <div key={index} className="flex items-start gap-2">\n                            <Pill variant="warning" className="mt-0.5">Note</Pill>\n                            <span className="text-sm text-zinc-400">{note}</span>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n\n                    {prop.changelog && prop.changelog.length > 0 && (\n                      <div className="space-y-1">\n                        <h4 className="text-xs font-medium text-zinc-400">\n                          <Pill variant="default">Changelog</Pill>\n                        </h4>\n                        <div className="space-y-2">\n                          {prop.changelog.map((log, index) => (\n                            <div key={index} className="text-sm flex items-center gap-2">\n                              <Pill variant="info">v{log.version}</Pill>\n                              <span className="text-zinc-400">{log.changes}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </motion.div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </td>\n      <td style={{ width: columnWidths.actions }} className="px-6 py-4">\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            onCopy(prop.name, prop.name);\n          }}\n          className="opacity-0 group-hover:opacity-100 transition-opacity"\n        >\n          {copiedProp === prop.name ? (\n            <Check size={14} className="text-green-400" />\n          ) : (\n            <Copy size={14} className="text-zinc-400 hover:text-zinc-300" />\n          )}\n        </button>\n      </td>\n    </>\n  );\n}\n',
					language: 'typescript'
				},
				{
					name: 'code-block',
					type: 'directory',
					children: [
						{
							name: 'animations.ts',
							type: 'file',
							content:
								"export const ANIMATION_VARIANTS = {\n  collapsed: {\n    height: 0,\n    opacity: 0,\n    transition: {\n      height: { duration: 0.4, ease: [0.16, 1, 0.3, 1] },\n      opacity: { duration: 0.3, ease: [0.16, 1, 0.3, 1] },\n    },\n  },\n  expanded: {\n    height: 'auto',\n    opacity: 1,\n    transition: {\n      height: { duration: 0.4, ease: [0.16, 1, 0.3, 1] },\n      opacity: { duration: 0.3, ease: [0.16, 1, 0.3, 1] },\n    },\n  },\n};\n\nexport const COPY_VARIANTS = {\n  initial: { opacity: 0, scale: 0.96 },\n  animate: {\n    opacity: 1,\n    scale: 1,\n    transition: { duration: 0.2, ease: [0.16, 1, 0.3, 1] },\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.96,\n    transition: { duration: 0.2, ease: [0.16, 1, 0.3, 1] },\n  },\n};\n\nexport const TOAST_VARIANTS = {\n  hidden: {\n    opacity: 0,\n    y: -20,\n    scale: 0.95,\n    transition: { duration: 0.2, ease: [0.16, 1, 0.3, 1] },\n  },\n  visible: {\n    opacity: 1,\n    y: 0,\n    scale: 1,\n    transition: { duration: 0.4, ease: [0.16, 1, 0.3, 1] },\n  },\n};\n  ",
							language: 'typescript'
						},
						{
							name: 'code-block.tsx',
							type: 'file',
							content:
								"'use client';\n\nimport { AnimatePresence, motion } from 'framer-motion';\nimport {\n  ArrowDown,\n  ArrowUp,\n  Check,\n  CheckCircle2,\n  ChevronDown,\n  Copy,\n  Code as DefaultIcon,\n  File,\n  Search,\n  X,\n} from 'lucide-react';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { PrismAsyncLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { cn } from '../../lib/utils';\n\nimport { Button } from '../../../@/components/ui/button';\nimport {\n  ANIMATION_VARIANTS,\n  COPY_VARIANTS,\n  TOAST_VARIANTS,\n} from './animations';\nimport { customTheme } from './custom-theme';\nimport * as Icons from './icons';\n\nfunction getLanguageIcon(language: string) {\n  switch (language.toLowerCase()) {\n    case 'typescript':\n      return <Icons.TypescriptIcon size={16} />;\n    case 'python':\n      return <Icons.PythonIcon size={16} />;\n    case 'rust':\n      return <Icons.RustIcon size={16} />;\n    case 'sql':\n      return <Icons.SqlLogo size={16} />;\n    case 'drizzle':\n      return <Icons.SqlLogo size={16} />;\n    default:\n      return <DefaultIcon size={16} />;\n  }\n}\n\nfunction calculateCodeStats(code: string) {\n  if (typeof code !== 'string') {\n    console.error('Expected code to be a string, but received:', typeof code);\n    return { lines: 0, chars: 0, words: 0 }; // Return default stats if code is not a string\n  }\n\n  const lines = code.split('\\n').length;\n  const chars = code.length;\n  const words = code.trim().split(/\\s+/).length;\n  return { lines, chars, words };\n}\n\ntype BadgeVariant =\n  | 'default'\n  | 'primary'\n  | 'secondary'\n  | 'success'\n  | 'warning'\n  | 'danger'\n  | 'custom';\n\ninterface BadgeProps {\n  variant?: BadgeVariant;\n  customColor?: string;\n}\n\nfunction getBadgeClasses({\n  variant = 'default',\n  customColor,\n}: BadgeProps): string {\n  const baseClasses =\n    'px-2 py-0.5 text-xs font-medium rounded-full transition-all duration-200';\n\n  if (variant === 'custom' && customColor) {\n    return `${baseClasses} border border-${customColor}-500/30 bg-${customColor}-500/10 text-${customColor}-400 hover:border-${customColor}-400 hover:text-${customColor}-300`;\n  }\n\n  switch (variant) {\n    case 'primary':\n      return `${baseClasses} border border-blue-500/30 bg-blue-500/10 text-blue-400 hover:border-blue-400 hover:text-blue-300`;\n    case 'secondary':\n      return `${baseClasses} border border-purple-500/30 bg-purple-500/10 text-purple-400 hover:border-purple-400 hover:text-purple-300`;\n    case 'success':\n      return `${baseClasses} border border-green-500/30 bg-green-500/10 text-green-400 hover:border-green-400 hover:text-green-300`;\n    case 'warning':\n      return `${baseClasses} border border-yellow-500/30 bg-yellow-500/10 text-yellow-400 hover:border-yellow-400 hover:text-yellow-300`;\n    case 'danger':\n      return `${baseClasses} border border-red-500/30 bg-red-500/10 text-red-400 hover:border-red-400 hover:text-red-300`;\n    default:\n      return `${baseClasses} border border-[#333333] bg-[#111111] text-zinc-400 hover:border-[#444444] hover:text-zinc-300`;\n  }\n}\n\ntype Badge = {\n  text: string;\n  variant: BadgeVariant;\n};\n\nexport type CodeBlockProps = {\n  code: string;\n  language: string;\n  fileName?: string;\n  badges?: Badge[];\n  showLineNumbers?: boolean;\n  enableLineHighlight?: boolean;\n  showMetaInfo?: boolean;\n  maxHeight?: string;\n  className?: string;\n  onCopy?: (code: string) => void;\n  onLineClick?: (lineNumber: number) => void;\n  onSearch?: (query: string, results: number[]) => void;\n  badgeVariant?: BadgeVariant;\n  badgeColor?: string;\n  fileNameColor?: string;\n  initialSearchQuery?: string;\n  initialSearchResults?: number[];\n  initialHighlightedLines?: number[];\n};\n\nexport function CodeBlock({\n  code,\n  language,\n  fileName,\n  badges = [],\n  showLineNumbers = true,\n  enableLineHighlight = false,\n  showMetaInfo = true,\n  maxHeight = '600px',\n  onCopy,\n  onLineClick,\n  onSearch,\n  badgeVariant = 'default',\n  badgeColor,\n  fileNameColor,\n  initialSearchQuery = '',\n  initialSearchResults = [],\n  initialHighlightedLines = [],\n}: CodeBlockProps) {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [isCopied, setIsCopied] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const [isSearching, setIsSearching] = useState(!!initialSearchQuery);\n  const [searchQuery, setSearchQuery] = useState(initialSearchQuery);\n  const [searchResults, setSearchResults] =\n    useState<number[]>(initialSearchResults);\n  const [currentResultIndex, setCurrentResultIndex] = useState(\n    initialSearchResults.length > 0 ? 0 : -1\n  );\n  const [highlightedLines, setHighlightedLines] = useState<number[]>(\n    initialHighlightedLines\n  );\n  const [stats] = useState(calculateCodeStats(code));\n  const codeRef = useRef<HTMLDivElement>(null);\n\n  const scrollToLine = useCallback((lineNumber: number) => {\n    if (!codeRef.current) return;\n\n    const lineElement = codeRef.current.querySelector(\n      `[data-line-number=\"${lineNumber}\"]`\n    );\n    if (lineElement) {\n      lineElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n  }, []);\n\n  const handleSearch = useCallback(\n    (query: string) => {\n      setSearchQuery(query);\n      if (!query) {\n        setSearchResults([]);\n        setCurrentResultIndex(-1);\n        setHighlightedLines([]);\n        onSearch?.('', []);\n        return;\n      }\n\n      const lines = code.split('\\n');\n      const matches = lines.reduce((acc, line, index) => {\n        if (line.toLowerCase().includes(query.toLowerCase())) {\n          acc.push(index + 1);\n        }\n        return acc;\n      }, [] as number[]);\n\n      setSearchResults(matches);\n      setCurrentResultIndex(matches.length > 0 ? 0 : -1);\n      setHighlightedLines(matches);\n      onSearch?.(query, matches);\n\n      if (matches.length > 0) {\n        scrollToLine(matches[0]);\n      }\n    },\n    [code, onSearch, scrollToLine]\n  );\n\n  useEffect(() => {\n    handleSearch(searchQuery);\n  }, [searchQuery, handleSearch]);\n\n  const copyToClipboard = useCallback(async () => {\n    try {\n      await navigator.clipboard.writeText(code);\n      setIsCopied(true);\n      onCopy?.(code);\n      setTimeout(() => setIsCopied(false), 2000);\n    } catch (error) {\n      console.error('Failed to copy:', error);\n    }\n  }, [code, onCopy]);\n\n  const goToNextResult = useCallback(() => {\n    if (searchResults.length === 0) return;\n    const nextIndex = (currentResultIndex + 1) % searchResults.length;\n    setCurrentResultIndex(nextIndex);\n    scrollToLine(searchResults[nextIndex]);\n  }, [searchResults, currentResultIndex, scrollToLine]);\n\n  const goToPreviousResult = useCallback(() => {\n    if (searchResults.length === 0) return;\n    const prevIndex =\n      currentResultIndex - 1 < 0\n        ? searchResults.length - 1\n        : currentResultIndex - 1;\n    setCurrentResultIndex(prevIndex);\n    scrollToLine(searchResults[prevIndex]);\n  }, [searchResults, currentResultIndex, scrollToLine]);\n\n  useEffect(() => {\n    function handleKeyboard(e: KeyboardEvent) {\n      if ((e.metaKey || e.ctrlKey) && e.key === 'c') {\n        copyToClipboard();\n      }\n\n      if ((e.metaKey || e.ctrlKey) && e.key === 'f' && !isCollapsed) {\n        e.preventDefault();\n        setIsSearching(true);\n      }\n\n      if (isSearching && searchResults.length > 0) {\n        if (e.key === 'Enter') {\n          if (e.shiftKey) {\n            goToPreviousResult();\n          } else {\n            goToNextResult();\n          }\n        }\n      }\n\n      if (e.key === 'Escape') {\n        setHighlightedLines([]);\n        setIsSearching(false);\n        setSearchQuery('');\n        setSearchResults([]);\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyboard);\n    return () => window.removeEventListener('keydown', handleKeyboard);\n  }, [\n    isCollapsed,\n    isSearching,\n    searchResults,\n    currentResultIndex,\n    copyToClipboard,\n    goToNextResult,\n    goToPreviousResult,\n  ]);\n\n  const handleLineClick = useCallback(\n    (lineNumber: number) => {\n      if (enableLineHighlight) {\n        setHighlightedLines((prev) =>\n          prev.includes(lineNumber)\n            ? prev.filter((line) => line !== lineNumber)\n            : [...prev, lineNumber]\n        );\n        onLineClick?.(lineNumber);\n      }\n    },\n    [enableLineHighlight, onLineClick]\n  );\n\n  function renderSearchUI() {\n    if (!isSearching) return null;\n\n    return (\n      <div className=\"flex items-center gap-2 bg-[#111111] rounded-lg border border-[#333333] p-1 h-8\">\n        <div className=\"relative\">\n          <input\n            type=\"text\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            placeholder=\"Search...\"\n            className=\"w-40 px-2 py-1 text-sm bg-transparent text-zinc-300 focus:outline-none placeholder:text-zinc-600\"\n            autoFocus\n          />\n          {searchQuery && (\n            <div className=\"absolute right-2 top-1/2 -translate-y-1/2 text-xs text-zinc-500\">\n              {searchResults.length > 0 ? (\n                <span>\n                  {currentResultIndex + 1}/{searchResults.length}\n                </span>\n              ) : (\n                <span>No results</span>\n              )}\n            </div>\n          )}\n        </div>\n\n        {searchResults.length > 0 && (\n          <>\n            <div className=\"h-4 w-[1px] bg-[#333333]\" />\n            <div className=\"flex items-center gap-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={goToPreviousResult}\n                className=\"h-6 w-6 text-zinc-500 hover:text-zinc-300\"\n              >\n                <ArrowUp size={14} />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={goToNextResult}\n                className=\"h-6 w-6 text-zinc-500 hover:text-zinc-300\"\n              >\n                <ArrowDown size={14} />\n              </Button>\n            </div>\n          </>\n        )}\n\n        <div className=\"h-4 w-[1px] bg-[#333333]\" />\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => {\n            setIsSearching(false);\n            setSearchQuery('');\n            setSearchResults([]);\n            setHighlightedLines([]);\n          }}\n          className=\"h-6 w-6 text-zinc-500 hover:text-zinc-300\"\n        >\n          <X size={14} />\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative\">\n      <div\n        className=\"group relative rounded-xl overflow-hidden bg-[#0A0A0A] dark:bg-[#0A0A0A] border border-[#333333] dark:border-[#333333] w-full transition-all duration-200\"\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n      >\n        <div className=\"flex justify-between items-center px-4 py-2.5 bg-[#0A0A0A] dark:bg-[#0A0A0A] border-b border-[#333333]\">\n          <div className=\"flex items-center gap-3\">\n            <span className=\"text-zinc-500 dark:text-zinc-500 transition-colors duration-200 group-hover:text-zinc-400\">\n              {getLanguageIcon(language)}\n            </span>\n            {fileName && (\n              <div\n                className={cn(\n                  'flex items-center gap-2 rounded-full px-3 py-1 border transition-all duration-200',\n                  fileNameColor\n                    ? `border-${fileNameColor}-500/30 bg-${fileNameColor}-500/10 text-${fileNameColor}-400 group-hover:border-${fileNameColor}-400 group-hover:text-${fileNameColor}-300`\n                    : 'bg-[#111111] border-[#333333] group-hover:border-[#444444]'\n                )}\n              >\n                <File\n                  size={12}\n                  className={\n                    fileNameColor\n                      ? `text-${fileNameColor}-400`\n                      : 'text-zinc-400'\n                  }\n                />\n                <span\n                  className={cn(\n                    'text-sm font-medium transition-colors duration-200',\n                    fileNameColor\n                      ? `text-${fileNameColor}-400 group-hover:text-${fileNameColor}-300`\n                      : 'text-zinc-400 group-hover:text-zinc-300'\n                  )}\n                >\n                  {fileName}\n                </span>\n              </div>\n            )}\n            <div className=\"flex items-center gap-2\">\n              {badges.map((badge, index) => (\n                <span\n                  key={index}\n                  className={getBadgeClasses({\n                    variant: badge.variant || badgeVariant,\n                    customColor: badgeColor,\n                  })}\n                >\n                  {badge.text}\n                </span>\n              ))}\n              {showMetaInfo && (\n                <span className=\"px-2 py-0.5 text-xs font-medium text-zinc-500\">\n                  {stats.lines} lines • {stats.words} words\n                </span>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-1.5 h-8\">\n            {renderSearchUI()}\n\n            {!isSearching && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setIsSearching(true)}\n                className=\"relative h-8 w-8 text-zinc-500 hover:text-zinc-200 rounded-md transition-all duration-200 hover:bg-white/10\"\n                title=\"Search (⌘/Ctrl + F)\"\n              >\n                <Search size={16} />\n              </Button>\n            )}\n\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsCollapsed(!isCollapsed)}\n              className=\"relative h-8 w-8 text-zinc-500 hover:text-zinc-200 rounded-md transition-all duration-200 hover:bg-white/10\"\n            >\n              <motion.div\n                initial={false}\n                animate={{ rotate: isCollapsed ? 0 : 180 }}\n                transition={{\n                  duration: 0.4,\n                  ease: [0.16, 1, 0.3, 1],\n                }}\n              >\n                <ChevronDown size={16} />\n              </motion.div>\n            </Button>\n\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={copyToClipboard}\n              className=\"relative h-8 w-8 text-zinc-500 hover:text-zinc-200 rounded-md transition-all duration-200 hover:bg-white/10\"\n              title=\"Copy code (⌘/Ctrl + C)\"\n            >\n              <AnimatePresence mode=\"wait\">\n                {isCopied ? (\n                  <motion.div\n                    key=\"check\"\n                    variants={COPY_VARIANTS}\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    className=\"text-emerald-400\"\n                  >\n                    <Check size={16} />\n                  </motion.div>\n                ) : (\n                  <Copy size={16} />\n                )}\n              </AnimatePresence>\n            </Button>\n          </div>\n        </div>\n\n        <AnimatePresence initial={false}>\n          {!isCollapsed && (\n            <motion.div\n              initial=\"collapsed\"\n              animate=\"expanded\"\n              exit=\"collapsed\"\n              variants={ANIMATION_VARIANTS}\n              className=\"overflow-hidden\"\n            >\n              <div className=\"relative\" ref={codeRef}>\n                {showLineNumbers && (\n                  <div className=\"absolute left-0 top-0 bottom-0 w-[3.5rem] bg-gradient-to-r from-[#0A0A0A] via-[#0A0A0A]/50 to-transparent pointer-events-none z-10\" />\n                )}\n\n                <div className=\"p-4 overflow-y-auto\" style={{ maxHeight }}>\n                  <SyntaxHighlighter\n                    language={language.toLowerCase()}\n                    style={customTheme}\n                    customStyle={{\n                      margin: 0,\n                      padding: 0,\n                      background: 'transparent',\n                      fontSize: '0.875rem',\n                    }}\n                    showLineNumbers={showLineNumbers}\n                    lineNumberStyle={{\n                      color: '#666666',\n                      minWidth: '2.5em',\n                      paddingRight: '1em',\n                      textAlign: 'right',\n                      userSelect: 'none',\n                      opacity: isHovered ? 1 : 0.5,\n                      transition: 'opacity 0.2s ease',\n                    }}\n                    wrapLines={true}\n                    wrapLongLines={true}\n                    lineProps={(lineNumber) => ({\n                      style: {\n                        display: 'block',\n                        cursor: enableLineHighlight ? 'pointer' : 'default',\n                        backgroundColor: highlightedLines.includes(lineNumber)\n                          ? 'rgba(255, 255, 255, 0.1)'\n                          : 'transparent',\n                      },\n                      onClick: () => handleLineClick(lineNumber),\n                    })}\n                  >\n                    {code}\n                  </SyntaxHighlighter>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      <AnimatePresence>\n        {isCopied && (\n          <motion.div\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"hidden\"\n            variants={TOAST_VARIANTS}\n            className=\"absolute top-3 right-3 flex items-center gap-2 px-3 py-2 rounded-lg bg-[#1A1A1A] border border-[#333333] shadow-lg\"\n          >\n            <CheckCircle2 className=\"w-4 h-4 text-emerald-400\" />\n            <span className=\"text-sm font-medium text-zinc-200\">\n              Copied to clipboard\n            </span>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n",
							language: 'typescript'
						},
						{
							name: 'custom-theme.ts',
							type: 'file',
							content:
								"import { CSSProperties } from 'react';\n\ntype CustomTheme = {\n  [key: string]: CSSProperties;\n};\n\nexport const customTheme: CustomTheme = {\n  'code[class*=\"language-\"]': {\n    color: '#f1f5f9',\n    background: 'none',\n    fontFamily:\n      'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    lineHeight: '1.5',\n    fontSize: '14px',\n    tabSize: 2,\n    hyphens: 'none',\n  },\n  'pre[class*=\"language-\"]': {\n    color: '#f1f5f9',\n    background: 'none',\n    fontFamily:\n      'ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace',\n    textAlign: 'left',\n    whiteSpace: 'pre',\n    wordSpacing: 'normal',\n    wordBreak: 'normal',\n    wordWrap: 'normal',\n    lineHeight: '1.5',\n    fontSize: '14px',\n    tabSize: 2,\n    hyphens: 'none',\n    padding: '1em',\n    margin: '0.5em 0',\n    overflow: 'auto',\n  },\n  comment: {\n    color: '#636e7b',\n    fontStyle: 'italic',\n  },\n  'block-comment': {\n    color: '#636e7b',\n    fontStyle: 'italic',\n  },\n  prolog: {\n    color: '#636e7b',\n  },\n  doctype: {\n    color: '#636e7b',\n  },\n  cdata: {\n    color: '#636e7b',\n  },\n  punctuation: {\n    color: '#94a3b8',\n  },\n  tag: {\n    color: '#f472b6',\n  },\n  'attr-name': {\n    color: '#f472b6',\n  },\n  namespace: {\n    color: '#f472b6',\n  },\n  deleted: {\n    color: '#ef4444',\n  },\n  'function-name': {\n    color: '#60a5fa',\n  },\n  boolean: {\n    color: '#c084fc',\n  },\n  number: {\n    color: '#c084fc',\n  },\n  function: {\n    color: '#60a5fa',\n  },\n  property: {\n    color: '#f472b6',\n  },\n  'class-name': {\n    color: '#93c5fd',\n  },\n  constant: {\n    color: '#c084fc',\n  },\n  symbol: {\n    color: '#f472b6',\n  },\n  selector: {\n    color: '#a5b4fc',\n  },\n  important: {\n    color: '#f472b6',\n    fontWeight: 'bold',\n  },\n  atrule: {\n    color: '#f472b6',\n  },\n  keyword: {\n    color: '#f472b6',\n  },\n  builtin: {\n    color: '#93c5fd',\n  },\n  string: {\n    color: '#a5b4fc',\n  },\n  char: {\n    color: '#a5b4fc',\n  },\n  'attr-value': {\n    color: '#a5b4fc',\n  },\n  regex: {\n    color: '#f472b6',\n  },\n  variable: {\n    color: '#f1f5f9',\n  },\n  operator: {\n    color: '#94a3b8',\n  },\n  entity: {\n    color: '#f472b6',\n    cursor: 'help',\n  },\n  url: {\n    color: '#94a3b8',\n  },\n  bold: {\n    fontWeight: 'bold',\n  },\n  italic: {\n    fontStyle: 'italic',\n  },\n  inserted: {\n    color: '#34d399',\n  },\n};\n",
							language: 'typescript'
						},
						{
							name: 'file-name-label.tsx',
							type: 'file',
							content:
								"import { File } from 'lucide-react';\nimport { cn } from '../../lib/utils';\n\ninterface FileNameLabelProps {\n  fileName: string;\n  color?: string;\n}\n\nexport function FileNameLabel({ fileName, color }: FileNameLabelProps) {\n  const baseClasses =\n    'flex items-center gap-2 rounded-full px-3 py-1 border transition-all duration-200';\n  const colorClasses = color\n    ? `border-${color}-500/30 bg-${color}-500/10 text-${color}-400 hover:border-${color}-400 hover:text-${color}-300`\n    : 'bg-[#111111] border-[#333333] hover:border-[#444444]';\n\n  return (\n    <div className={cn(baseClasses, colorClasses)}>\n      <File\n        size={12}\n        className={color ? `text-${color}-400` : 'text-zinc-400'}\n      />\n      <span\n        className={cn(\n          'text-sm font-medium transition-colors duration-200',\n          color\n            ? `text-${color}-400 hover:text-${color}-300`\n            : 'text-zinc-400 hover:text-zinc-300'\n        )}\n      >\n        {fileName}\n      </span>\n    </div>\n  );\n}\n",
							language: 'typescript'
						},
						{
							name: 'icons.tsx',
							type: 'file',
							content:
								'\'use client\';\n\ntype IconProps = {\n  className?: string;\n  size?: number;\n};\n\nconst DEFAULT_ICON_SIZE = 16;\n\nexport function SqlLogo({\n  className = \'\',\n  size = DEFAULT_ICON_SIZE,\n}: IconProps) {\n  return (\n    <svg\n      xmlns="http://www.w3.org/2000/svg"\n      fill="#fff"\n      fillRule="evenodd"\n      stroke="#000"\n      strokeLinecap="round"\n      strokeLinejoin="round"\n      viewBox="0 0 61 81"\n      className={className}\n      width={size}\n      height={size}\n    >\n      <use x="0.5" y="0.5" xlinkHref="#A" />\n      <symbol id="A" overflow="visible">\n        <g fill="#0072c6" stroke="none">\n          <path d="M0 10.929v58.14C0 75.106 13.432 80 30 80V10.929H0z" />\n          <use xlinkHref="#C" />\n        </g>\n        <use stroke="none" opacity="0.15" xlinkHref="#C" />\n        <path\n          stroke="none"\n          d="M60 10.929c0 6.036-13.432 10.929-30 10.929S0 16.965 0 10.929 13.432 0 30 0s30 4.893 30 10.929"\n        />\n        <path\n          fill="#7fba00"\n          stroke="none"\n          d="M53.866 10.299c0 3.985-10.685 7.211-23.866 7.211S6.132 14.284 6.132 10.299 16.819 3.088 30 3.088s23.866 3.228 23.866 7.211"\n        />\n        <path\n          fill="#b8d432"\n          stroke="none"\n          d="M48.867 14.707c3.124-1.219 5.002-2.745 5.002-4.404C53.868 6.318 43.183 3.09 30 3.09S6.134 6.318 6.134 10.303c0 1.658 1.877 3.185 5.002 4.404 4.363-1.704 11.182-2.803 18.865-2.803s14.5 1.099 18.866 2.803"\n        />\n      </symbol>\n      <defs>\n        <path\n          id="C"\n          d="M29.589 79.999H30c16.568 0 30-4.892 30-10.929V10.93H29.589V80z"\n        />\n      </defs>\n    </svg>\n  );\n}\n\nexport function RustIcon({ className = \'\' }: IconProps) {\n  return (\n    <svg\n      className={className}\n      width={36}\n      height={36}\n      viewBox="0 0 64 64"\n      fill="none"\n      xmlns="http://www.w3.org/2000/svg"\n    >\n      <path\n        d="m47.781 31.608-1.343-.832a18.57 18.57 0 0 0-.038-.391l1.154-1.077a.46.46 0 0 0-.153-.771l-1.476-.552a16.798 16.798 0 0 0-.115-.381l.92-1.279a.462.462 0 0 0-.3-.727l-1.557-.253c-.06-.118-.123-.234-.187-.35l.654-1.435a.46.46 0 0 0-.437-.654l-1.579.055a12.482 12.482 0 0 0-.25-.302l.363-1.539a.461.461 0 0 0-.556-.556l-1.538.362c-.1-.084-.2-.167-.303-.25l.055-1.578a.46.46 0 0 0-.654-.437l-1.435.654a16.712 16.712 0 0 0-.35-.188l-.253-1.556a.462.462 0 0 0-.726-.301l-1.28.92a14.31 14.31 0 0 0-.38-.115l-.552-1.476a.461.461 0 0 0-.771-.154l-1.077 1.156c-.13-.014-.26-.028-.391-.038l-.832-1.344a.462.462 0 0 0-.786 0l-.832 1.344c-.13.01-.261.024-.391.038l-1.077-1.155a.464.464 0 0 0-.771.153l-.552 1.476c-.128.037-.255.076-.38.116l-.552 1.476a.46.46 0 0 0 .771.153l1.155-1.077c-.015.13-.028.26-.039.391l-1.343.832a.462.462 0 0 0 0 .786l1.343.831c.011.131.024.262.039.392l-1.155 1.077a.462.462 0 0 0 .153.771l1.155 1.077c-.014.13-.027.261-.039.392l-1.343.832a.462.462 0 0 0 0-.786l-1.343-.831c-.011-.131-.024-.262-.039-.392l1.077-1.155a.462.462 0 0 0-.771.153l-.552 1.476c-.037.128-.076.255-.116.38l.921 1.28a.462.462 0 0 0-.301.726l-1.556.253c-.061.118-.123.235-.188.35l.655 1.435a.46.46 0 0 0 .437.654l1.579-.055c.082.103.165.203.25.303l-.363 1.539a.46.46 0 0 0 .556.555l1.538-.362c.1.085.201.167.303.249l-.055 1.58a.461.461 0 0 0 .654.436l1.435-.654c.115.064.232.127.35.188l.253 1.555a.461.461 0 0 0 .727.302l1.279-.922c.126.04.253.08.38.116l.552 1.476a.46.46 0 0 0 .771.153l1.078-1.155c.13.015.26.028.391.04l.832 1.343a.463.463 0 0 0 .786 0l.831-1.344c.131-.011.262-.024.392-.039l1.077 1.155a.46.46 0 0 0 .77-.153l.553-1.476c.127-.036.254-.076.38-.116l1.28.922a.463.463 0 0 0 .726-.302l.254-1.556c.117-.06.233-.124.349-.187l1.435.654a.461.461 0 0 0 .654-.437l-.055-1.58c.102-.08.203-.163.303-.248l1.538.362a.46.46 0 0 0 .556-.555l-.362-1.539c.084-.1.167-.2.249-.303l1.58.055a.46.46 0 0 0 .436-.654l-.654-1.435c.064-.115.126-.232.187-.35l1.556-.253a.46.46 0 0 0 .301-.726l-.92-1.28a17.5 17.5 0 0 0 .115-.38l1.476-.552a.46.46 0 0 0 .153-.771l-1.155-1.077c.014-.13.027-.261.039-.392l1.343-.831a.462.462 0 0 0 0-.786zM38.79 42.752a.952.952 0 0 1 .399-1.861.952.952 0 0 1-.4 1.861zm-.457-3.087a.866.866 0 0 0-1.028.666l-.477 2.226A11.649 11.649 0 0 1 32 43.597c-1.76 0-3.43-.39-4.929-1.087l-.477-2.225a.866.866 0 0 0-1.028-.667l-1.965.422a11.68 11.68 0 0 1-1.016-1.197h9.561c.108 0 .18-.02.18-.118v-3.382c0-.099-.072-.118-.18-.118H29.35V33.08h3.024c.276 0 1.476.079 1.86 1.613.12.471.384 2.006.564 2.497.18.551.912 1.652 1.692 1.652h4.764a.977.977 0 0 0 .173-.017c-.33.449-.693.874-1.083 1.27l-2.01-.431zm-13.223 3.04a.952.952 0 0 1-.399-1.861.95.95 0 0 1 .398 1.862zm-3.627-14.707a.95.95 0 1 1-1.737.771.95.95 0 1 1 1.737-.771zm-1.115 2.643 2.047-.91a.868.868 0 0 0 .44-1.145l-.421-.953h1.658v7.474h-3.345a11.714 11.714 0 0 1-.38-4.466zm8.983-.726v-2.203h3.948c.204 0 1.44.236 1.44 1.16 0 .767-.948 1.043-1.728 1.043h-3.66zM43.7 31.898c0 .292-.011.581-.033.868h-1.2c-.12 0-.168.08-.168.197v.551c0 1.298-.732 1.58-1.373 1.652-.61.068-1.288-.256-1.371-.63-.36-2.025-.96-2.458-1.908-3.206 1.176-.746 2.4-1.848 2.4-3.323 0-1.593-1.092-2.596-1.836-3.088-1.044-.688-2.2-.826-2.512-.826H23.285a11.684 11.684 0 0 1 6.545-3.694l1.463 1.535c.331.346.88.36 1.225.028l1.638-1.566a11.71 11.71 0 0 1 8.009 5.704l-1.121 2.532a.869.869 0 0 0 .44 1.145l2.159.958c.037.383.056.77.056 1.163zM31.294 19.093a.95.95 0 0 1 1.344.031.952.952 0 0 1-.032 1.346.949.949 0 0 1-1.343-.032.953.953 0 0 1 .031-1.345zm11.123 8.951a.95.95 0 1 1 1.737.772.95.95 0 1 1-1.737-.772z"\n        fill="#808080"\n      />\n    </svg>\n  );\n}\n\nexport function TypescriptIcon({\n  className = \'\',\n  size = DEFAULT_ICON_SIZE,\n}: IconProps) {\n  return (\n    <svg\n      className={className}\n      width={size}\n      height={size}\n      viewBox="0 0 512 512"\n      fill="none"\n      xmlns="http://www.w3.org/2000/svg"\n    >\n      <rect fill="#3178c6" height="512" rx="50" width="512" />\n      <path\n        clipRule="evenodd"\n        d="m316.939 407.424v50.061c8.138 4.172 17.763 7.3 28.875 9.386s22.823 3.129 35.135 3.129c11.999 0 23.397-1.147 34.196-3.442 10.799-2.294 20.268-6.075 28.406-11.342 8.138-5.266 14.581-12.15 19.328-20.65s7.121-19.007 7.121-31.522c0-9.074-1.356-17.026-4.069-23.857s-6.625-12.906-11.738-18.225c-5.112-5.319-11.242-10.091-18.389-14.315s-15.207-8.213-24.18-11.967c-6.573-2.712-12.468-5.345-17.685-7.9-5.217-2.556-9.651-5.163-13.303-7.822-3.652-2.66-6.469-5.476-8.451-8.448-1.982-2.973-2.974-6.336-2.974-10.091 0-3.441.887-6.544 2.661-9.308s4.278-5.136 7.512-7.118c3.235-1.981 7.199-3.52 11.894-4.615 4.696-1.095 9.912-1.642 15.651-1.642 4.173 0 8.581.313 13.224.938 4.643.626 9.312 1.591 14.008 2.894 4.695 1.304 9.259 2.947 13.694 4.928 4.434 1.982 8.529 4.276 12.285 6.884v-46.776c-7.616-2.92-15.937-5.084-24.962-6.492s-19.381-2.112-31.066-2.112c-11.895 0-23.163 1.278-33.805 3.833s-20.006 6.544-28.093 11.967c-8.086 5.424-14.476 12.333-19.171 20.729-4.695 8.395-7.043 18.433-7.043 30.114 0 14.914 4.304 27.638 12.912 38.172 8.607 10.533 21.675 19.45 39.204 26.751 6.886 2.816 13.303 5.579 19.25 8.291s11.086 5.528 15.415 8.448c4.33 2.92 7.747 6.101 10.252 9.543 2.504 3.441 3.756 7.352 3.756 11.733 0 3.233-.783 6.231-2.348 8.995s-3.939 5.162-7.121 7.196-7.147 3.624-11.894 4.771c-4.748 1.148-10.303 1.721-16.668 1.721-10.851 0-21.597-1.903-32.24-5.71-10.642-3.806-20.502-9.516-29.579-17.13zm-84.159-123.342h64.22v-41.082h-179v41.082h63.906v182.918h50.874z"\n        fill="#fff"\n        fillRule="evenodd"\n      />\n    </svg>\n  );\n}\nexport function ReactIcon({\n  className = \'\',\n  size = DEFAULT_ICON_SIZE,\n}: IconProps) {\n  return (\n    <svg\n      className={className}\n      width={size}\n      height={size}\n      viewBox="-11.5 -10.23174 23 20.46348"\n      xmlns="http://www.w3.org/2000/svg"\n    >\n      <title>React Logo</title>\n      <circle cx="0" cy="0" r="2.05" fill="#61dafb" />\n      <g stroke="#61dafb" stroke-width="1" fill="none">\n        <ellipse rx="11" ry="4.2" />\n        <ellipse rx="11" ry="4.2" transform="rotate(60)" />\n        <ellipse rx="11" ry="4.2" transform="rotate(120)" />\n      </g>\n    </svg>\n  );\n}\nexport function MdxIcon({\n  className = \'\',\n  size = DEFAULT_ICON_SIZE,\n}: IconProps) {\n  return (\n    <svg\n      className={className}\n      width={size}\n      height={size}\n      viewBox="0 0 512 212"\n      xmlns="http://www.w3.org/2000/svg"\n    >\n      <path\n        d="m19.4782609 2.7826087h473.0434781c9.220754 0 16.695652 7.4748981 16.695652 16.6956522v172.5217391c0 9.220754-7.474898 16.695652-16.695652 16.695652h-473.0434781c-9.2207541 0-16.6956522-7.474898-16.6956522-16.695652v-172.5217391c0-9.2207541 7.4748981-16.6956522 16.6956522-16.6956522z"\n        fill="#fff"\n      />\n      <path\n        d="m19.4782609 0h473.0434781c10.757547 0 19.478261 8.72071444 19.478261 19.4782609v172.5217391c0 10.757546-8.720714 19.478261-19.478261 19.478261h-473.0434781c-10.75754646 0-19.4782609-8.720715-19.4782609-19.478261v-172.5217391c0-10.75754646 8.72071444-19.4782609 19.4782609-19.4782609zm0 5.56521739c-7.6839618 0-13.91304351 6.22908171-13.91304351 13.91304351v172.5217391c0 7.683962 6.22908171 13.913043 13.91304351 13.913043h473.0434781c7.683962 0 13.913044-6.229081 13.913044-13.913043v-172.5217391c0-7.6839618-6.229082-13.91304351-13.913044-13.91304351z"\n        fill="#eaeaea"\n      />\n      <path d="m272.695652 40.2031304-.001188 84.8955366 31.184061-31.17783 15.740225 15.741398-57.642 57.637704-58.368895-58.368895 15.740812-15.7408122 31.084927 31.0847822.001189-84.0718836z" />\n      <path d="m72.1623188 162.979246v-65.7474391l40.2545062 40.2574121 40.559871-40.5569594v65.3828704h22.260869v-119.122636l-62.819607 62.815098-62.5165087-62.5210221v119.4926761z" />\n      <path\n        d="m447.84683 36.6511988 15.740543 15.7410807-47.149576 47.1471988 45.698909 45.7002427-15.740543 15.74108-45.700511-45.699178-45.700511 45.699178-15.740543-15.74108 45.695199-45.7002427-47.145866-47.1471988 15.740543-15.7410807 47.151178 47.1461345z"\n        fill="#f9ac00"\n      />\n    </svg>\n  );\n}\nexport function PythonIcon({\n  className = \'\',\n  size = DEFAULT_ICON_SIZE,\n}: IconProps) {\n  return (\n    <svg\n      className={className}\n      width={size}\n      height={size}\n      viewBox="0 0 64 64"\n      fill="none"\n      xmlns="http://www.w3.org/2000/svg"\n    >\n      <title>Python Logo</title>\n      <path\n        d="M31.885 16c-8.124 0-7.617 3.523-7.617 3.523l.01 3.65h7.752v1.095H21.197S16 23.678 16 31.876c0 8.196 4.537 7.906 4.537 7.906h2.708v-3.804s-.146-4.537 4.465-4.537h7.688s4.32.07 4.32-4.175v-7.019S40.374 16 31.885 16zm-4.275 2.454c.771 0 1.395.624 1.395 1.395s-.624 1.395-1.395 1.395a1.393 1.393 0 0 1-1.395-1.395c0-.771.624-1.395 1.395-1.395z"\n        fill="url(#a)"\n      />\n      <path\n        d="M32.115 47.833c8.124 0 7.617-3.523 7.617-3.523l-.01-3.65H31.97v-1.095h10.832S48 40.155 48 31.958c0-8.197-4.537-7.906-4.537-7.906h-2.708v3.803s.146 4.537-4.465 4.537h-7.688s-4.32-.07-4.32 4.175v7.019s-.656 4.247 7.833 4.247zm4.275-2.454a1.393 1.393 0 0 1-1.395-1.395c0-.77.624-1.394 1.395-1.394s1.395.623 1.395 1.394c0 .772-.624 1.395-1.395 1.395z"\n        fill="url(#b)"\n      />\n      <defs>\n        <linearGradient\n          id="a"\n          x1="19.075"\n          y1="18.782"\n          x2="34.898"\n          y2="34.658"\n          gradientUnits="userSpaceOnUse"\n        >\n          <stop stop-color="#387EB8" />\n          <stop offset="1" stop-color="#366994" />\n        </linearGradient>\n        <linearGradient\n          id="b"\n          x1="28.809"\n          y1="28.882"\n          x2="45.803"\n          y2="45.163"\n          gradientUnits="userSpaceOnUse"\n        >\n          <stop stop-color="#FFE052" />\n          <stop offset="1" stop-color="#FFC331" />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n}\nexport function JavascriptIcon({\n  className = \'\',\n  size = DEFAULT_ICON_SIZE,\n}: IconProps) {\n  return (\n    <svg\n      className={className}\n      width={size}\n      height={size}\n      viewBox="0 0 256 256"\n      xmlns="http://www.w3.org/2000/svg"\n    >\n      <path d="m0 0h256v256h-256z" fill="#f7df1e" />\n      <path d="m67.311746 213.932292 19.590908-11.856051c3.7794539 6.701105 7.2175746 12.370896 15.464432 12.370896 7.905117 0 12.88899-3.092318 12.88899-15.120254v-81.798096h24.057499v82.13821c0 24.917333-14.605816 36.258946-35.915175 36.258946-19.2451048 0-30.4164571-9.96734-36.0870603-21.995683" />\n      <path d="m152.380952 211.354413 19.58847-11.341613c5.156572 8.421181 11.858489 14.607035 23.714946 14.607035 9.968153 0 16.324673-4.983873 16.324673-11.857676 0-8.248483-6.529625-11.170134-17.527873-15.980089l-6.012749-2.579505c-17.357206-7.387835-28.871111-16.667225-28.871111-36.257727 0-18.04353 13.7472-31.791543 35.228444-31.791543 15.294172 0 26.292013 5.327645 34.195911 19.247137l-18.731073 12.028343c-4.124444-7.388648-8.591034-10.309486-15.464431-10.309486-7.045689 0-11.513905 4.467809-11.513905 10.309486 0 7.217574 4.468216 10.139631 14.777702 14.607847l6.013968 2.577473c20.449524 8.764546 31.963428 17.699353 31.963428 37.804292 0 21.653537-17.012215 33.509588-39.86692 33.509588-22.339454 0-36.774603-10.653664-43.819073-24.573562" />\n    </svg>\n  );\n}\n',
							language: 'typescript'
						},
						{
							name: 'light-theme.ts',
							type: 'file',
							content:
								"export const customLightTheme = {\n    'code[class*=\"language-\"]': {\n        color: '#24292e',\n        background: 'none',\n        fontFamily: 'var(--font-geist-mono)',\n        fontSize: '13px',\n        textAlign: 'left',\n        whiteSpace: 'pre',\n        wordSpacing: 'normal',\n        wordBreak: 'normal',\n        wordWrap: 'normal',\n        lineHeight: '1.5',\n        tabSize: 4,\n        hyphens: 'none',\n    },\n    'pre[class*=\"language-\"]': {\n        color: '#24292e',\n        background: '#ffffff',\n        padding: '1em',\n        margin: '.5em 0',\n        overflow: 'auto',\n    },\n    comment: {\n        color: '#6a737d',\n        fontStyle: 'italic',\n    },\n    punctuation: {\n        color: '#24292e',\n    },\n    property: {\n        color: '#005cc5',\n    },\n    string: {\n        color: '#032f62',\n    },\n    keyword: {\n        color: '#d73a49',\n    },\n    'class-name': {\n        color: '#6f42c1',\n    },\n    function: {\n        color: '#6f42c1',\n    },\n    operator: {\n        color: '#d73a49',\n    },\n    number: {\n        color: '#005cc5',\n    },\n    'attr-name': {\n        color: '#005cc5',\n    },\n    'attr-value': {\n        color: '#032f62',\n    },\n    parameter: {\n        color: '#24292e',\n    },\n    selector: {\n        color: '#22863a',\n    },\n    regex: {\n        color: '#032f62',\n    },\n    variable: {\n        color: '#005cc5',\n    },\n    constant: {\n        color: '#005cc5',\n    },\n    builtin: {\n        color: '#005cc5',\n    }\n}; \n",
							language: 'typescript'
						}
					]
				},
				{
					name: 'ide',
					type: 'directory',
					children: [
						{
							name: 'file-viewer.tsx',
							type: 'file',
							content:
								"\"use client\"\n\nimport { AnimatePresence, motion } from 'framer-motion'\nimport { X } from 'lucide-react'\nimport { PrismAsyncLight as SyntaxHighlighter } from 'react-syntax-highlighter'\nimport { ScrollArea } from \"../../../@/components/ui/scroll-area\"\nimport { cn } from \"../../lib/utils\"\nimport { customTheme } from '../code-block/custom-theme'\nimport { customLightTheme } from '../code-block/light-theme'\n\ntype FileViewerProps = {\n    content?: string\n    language?: string\n    theme?: 'light' | 'dark' | 'system'\n    openedFiles: string[]\n    selectedPath: string | null\n    onCloseFile: (path: string) => void\n    onSelectFile: (path: string) => void\n    fontSize?: number\n    activeTabColor?: 'blue' | 'purple' | 'pink' | 'green' | 'orange'\n    lineNumbers?: boolean\n    wordWrap?: boolean\n}\n\nconst TAB_COLORS = {\n    blue: 'before:bg-blue-400',\n    purple: 'before:bg-purple-400',\n    pink: 'before:bg-pink-400',\n    green: 'before:bg-green-400',\n    orange: 'before:bg-orange-400',\n} as const;\n\nexport default function FileViewer({\n    content,\n    language = 'typescript',\n    theme = 'system',\n    openedFiles,\n    selectedPath,\n    onCloseFile,\n    onSelectFile,\n    fontSize = 13,\n    activeTabColor = 'blue',\n    lineNumbers = true,\n    wordWrap = false\n}: FileViewerProps) {\n    if (!content) return null\n\n    const getFileName = (path: string) => path.split('/').pop() || path\n\n    return (\n        <div className=\"flex flex-col h-full\">\n            {/* Header with tabs and window controls */}\n            <div className={cn(\n                \"flex items-center justify-between border-b px-4\",\n                theme === 'dark' ? \"border-[#333333]\" : \"border-zinc-200\"\n            )}>\n                <div className=\"flex-1 flex\">\n                    <AnimatePresence initial={false}>\n                        {openedFiles.map((file) => (\n                            <motion.button\n                                key={file}\n                                initial={{ opacity: 0, x: -8 }}\n                                animate={{ opacity: 1, x: 0 }}\n                                exit={{ opacity: 0, x: -8 }}\n                                transition={{\n                                    duration: 0.2,\n                                    ease: [0.16, 1, 0.3, 1],\n                                }}\n                                onClick={() => onSelectFile(file)}\n                                className={cn(\n                                    \"group relative h-9 flex items-center gap-2 px-4 text-sm font-medium transition-colors\",\n                                    selectedPath === file\n                                        ? `text-zinc-100 before:absolute before:bottom-0 before:left-0 before:h-[2px] before:w-full ${TAB_COLORS[activeTabColor]}`\n                                        : \"text-zinc-400 hover:text-zinc-300\"\n                                )}\n                            >\n                                {getFileName(file)}\n                                <motion.div\n                                    initial={{ opacity: 0, scale: 0.8 }}\n                                    animate={{ opacity: 1, scale: 1 }}\n                                    exit={{ opacity: 0, scale: 0.8 }}\n                                    transition={{ duration: 0.15 }}\n                                >\n                                    <X\n                                        size={14}\n                                        className=\"opacity-0 group-hover:opacity-100 hover:text-red-400\"\n                                        onClick={(e) => {\n                                            e.stopPropagation()\n                                            onCloseFile(file)\n                                        }}\n                                    />\n                                </motion.div>\n                            </motion.button>\n                        ))}\n                    </AnimatePresence>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                    <div className=\"h-3 w-3 rounded-full bg-[#333333]\" />\n                    <div className=\"h-3 w-3 rounded-full bg-[#333333]\" />\n                    <div className=\"h-3 w-3 rounded-full bg-[#333333]\" />\n                </div>\n            </div>\n\n            {/* Code viewer without animations */}\n            <div className=\"flex-1 relative\">\n                <ScrollArea className=\"h-full\">\n                    <div className=\"relative font-mono pb-40\" style={{ fontSize: `${fontSize}px` }}>\n                        <SyntaxHighlighter\n                            language={language}\n                            style={theme === 'dark' ? customTheme : customLightTheme}\n                            showLineNumbers={lineNumbers}\n                            lineNumberStyle={{\n                                minWidth: '1.5rem',\n                                paddingRight: '0.25rem',\n                                textAlign: 'right',\n                                color: '#666',\n                                marginRight: '0.25rem',\n                                userSelect: 'none',\n                            }}\n                            customStyle={{\n                                margin: 0,\n                                padding: '1rem 0',\n                                background: 'transparent',\n                                fontSize: `${fontSize}px`,\n                                lineHeight: '1.5',\n                                width: '100%',\n                                overflowX: 'auto',\n                            }}\n                            codeTagProps={{\n                                style: {\n                                    fontSize: `${fontSize}px`,\n                                    lineHeight: '1.5',\n                                    fontFamily: 'var(--font-geist-mono)',\n                                    whiteSpace: wordWrap ? 'pre-wrap' : 'pre',\n                                }\n                            }}\n                            wrapLongLines={wordWrap}\n                        >\n                            {content}\n                        </SyntaxHighlighter>\n                    </div>\n                </ScrollArea>\n                {/* Add the same fade effect */}\n                <div className=\"absolute bottom-0 left-0 right-0 pointer-events-none\">\n                    <div className={cn(\n                        \"h-[1px] w-full\",\n                        theme === 'dark' ? \"bg-[#333333]/20\" : \"bg-zinc-200/20\"\n                    )} />\n                    <div\n                        className={cn(\n                            \"h-40\",\n                            theme === 'dark'\n                                ? \"bg-gradient-to-t from-black via-black/80 to-transparent\"\n                                : \"bg-gradient-to-t from-white via-white/80 to-transparent\"\n                        )}\n                        style={{\n                            backdropFilter: 'blur(4px)',\n                            WebkitMaskImage: 'linear-gradient(to top, black, transparent)',\n                            maskImage: 'linear-gradient(to top, black, transparent)',\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n} \n",
							language: 'typescript'
						},
						{
							name: 'ide-demo.tsx',
							type: 'file',
							content:
								"'use client';\n\nimport { projectStructure } from '../../core/config/tree-object';\nimport IDE from './ide';\n\nexport default function IDEDemo() {\n  const handleFileSelect = (path: string) => {\n    console.log('Selected file:', path);\n  };\n\n  return (\n    <div className=\"h-[500px]\">\n      <IDE\n        root={projectStructure}\n        onSelect={handleFileSelect}\n        theme=\"dark\"\n        defaultOpen={true}\n        maxFilesOpen={3}\n      />\n    </div>\n  );\n}\n",
							language: 'typescript'
						},
						{
							name: 'ide.tsx',
							type: 'file',
							content:
								"\"use client\"\n\nimport { AnimatePresence, motion, Reorder, useMotionValue, useSpring } from \"framer-motion\"\nimport { Code2, File, Folder, GripVertical } from 'lucide-react'\nimport * as React from \"react\"\nimport { Resizable } from 'react-resizable'\nimport 'react-resizable/css/styles.css'\nimport { create } from \"zustand\"\nimport { Card } from \"../../../@/components/ui/card\"\nimport { ScrollArea } from \"../../../@/components/ui/scroll-area\"\nimport { useDebouncedCallback } from '../../hooks/use-debounce'\nimport { cn } from \"../../lib/utils\"\nimport FileViewer from \"./file-viewer\"\nimport SettingsPanel from './settings'\n\n\n\ninterface FileExplorer {\n  name: string\n  type: \"file\" | \"directory\"\n  children?: FileExplorer[]\n  content?: string\n  language?: string\n}\n\ninterface IDEProps {\n  root: FileExplorer\n  onSelect: (path: string) => void\n  theme?: \"light\" | \"dark\" | \"system\"\n  defaultCollapsed?: boolean\n  defaultOpen?: boolean\n  maxFilesOpen?: number\n  folderColor?: string\n  defaultSelectedPath?: string\n  colorfulIcons?: boolean\n  defaultSettings?: Partial<SettingsState>\n  rootName?: string\n  showIndentGuides?: boolean\n}\n\ninterface FileStoreState {\n  expandedPaths: Set<string>\n  selectedPath: string | null\n  toggleExpanded: (path: string) => void\n  setSelectedPath: (path: string) => void\n  openedFiles: string[]\n  setOpenedFiles: (files: string[]) => void\n}\n\ntype SetState = (\n  partial: FileStoreState | Partial<FileStoreState> | ((state: FileStoreState) => FileStoreState | Partial<FileStoreState>),\n  replace?: boolean | undefined\n) => void\n\nconst useFileStore = create<FileStoreState>((set: SetState) => ({\n  expandedPaths: new Set<string>([]),\n  selectedPath: null,\n  toggleExpanded: (path: string) =>\n    set((state: FileStoreState) => {\n      const newExpanded = new Set(state.expandedPaths)\n      if (newExpanded.has(path)) {\n        newExpanded.delete(path)\n      } else {\n        newExpanded.add(path)\n      }\n      return { expandedPaths: newExpanded }\n    }),\n  setSelectedPath: (path: string) => set({ selectedPath: path }),\n  openedFiles: [],\n  setOpenedFiles: (files: string[]) => set({ openedFiles: files }),\n}))\n\ntype FileTreeProps = {\n  item: FileExplorer\n  path?: string\n  depth?: number\n  defaultCollapsed: boolean\n  handleFileSelect: (path: string) => void\n  defaultOpen?: boolean\n  maxFilesOpen?: number\n  folderColor?: string\n  colorfulIcons?: boolean\n  rootName?: string\n  showIndentGuides?: boolean\n}\n\n// Add this type to identify binary files\ntype BinaryFileTypes = '.ico' | '.woff' | '.woff2' | '.ttf' | '.eot' | '.png' | '.jpg' | '.jpeg' | '.gif' | '.webp';\n\n// Add this helper function\nconst isBinaryFile = (fileName: string): boolean => {\n  const extension = fileName.slice(fileName.lastIndexOf('.')).toLowerCase() as BinaryFileTypes;\n  const binaryExtensions: BinaryFileTypes[] = ['.ico', '.woff', '.woff2', '.ttf', '.eot', '.png', '.jpg', '.jpeg', '.gif', '.webp'];\n  return binaryExtensions.includes(extension);\n}\n\n// Add icon colors mapping\nconst FILE_ICON_COLORS = {\n  // Config files\n  'tsconfig.json': 'text-blue-400',\n  'package.json': 'text-red-400',\n  '.env': 'text-green-400',\n  // Source files\n  '.tsx': 'text-blue-400',\n  '.ts': 'text-blue-400',\n  '.js': 'text-yellow-400',\n  '.jsx': 'text-yellow-400',\n  // Styles\n  '.css': 'text-sky-400',\n  '.scss': 'text-pink-400',\n  // Other\n  '.md': 'text-white',\n  '.json': 'text-yellow-400',\n} as const;\n\nconst FOLDER_COLORS = {\n  'src': 'text-blue-400',\n  'components': 'text-purple-400',\n  'pages': 'text-orange-400',\n  'styles': 'text-pink-400',\n  'public': 'text-green-400',\n  'assets': 'text-yellow-400',\n} as const;\n\nconst FileTree: React.FC<FileTreeProps> = ({\n  item,\n  path = \"\",\n  depth = 0,\n  defaultCollapsed,\n  handleFileSelect,\n  defaultOpen,\n  maxFilesOpen,\n  folderColor,\n  colorfulIcons = false,\n  rootName = \"project-root\",\n  showIndentGuides = true,\n}: FileTreeProps) => {\n  const { expandedPaths, selectedPath, toggleExpanded, setSelectedPath, openedFiles, setOpenedFiles } = useFileStore()\n  const fullPath = `${path}/${item.name}`\n  const isExpanded = expandedPaths.has(fullPath) || (defaultOpen && item.type === \"directory\")\n  const isSelected = selectedPath === fullPath\n\n  const isBinary = item.type === \"file\" && isBinaryFile(item.name);\n\n  const handleFileOpen = (filePath: string) => {\n    if (!openedFiles.includes(filePath)) {\n      if (openedFiles.length >= maxFilesOpen) {\n        const fileToClose = openedFiles[0]\n        setOpenedFiles(openedFiles.filter(file => file !== fileToClose))\n      }\n      setOpenedFiles([...openedFiles, filePath])\n    }\n    setSelectedPath(filePath)\n    handleFileSelect(filePath)\n  }\n\n  React.useEffect(() => {\n    if (item.type === \"directory\" && defaultCollapsed) {\n      toggleExpanded(fullPath)\n    }\n  }, [fullPath, item.type, toggleExpanded, defaultCollapsed])\n\n  const getFileIconColor = (fileName: string) => {\n    if (!colorfulIcons) return \"text-zinc-400\";\n    const extension = Object.keys(FILE_ICON_COLORS).find(ext => fileName.endsWith(ext));\n    return extension ? FILE_ICON_COLORS[extension] : \"text-zinc-400\";\n  };\n\n  const getFolderColor = (folderName: string) => {\n    if (!colorfulIcons) return \"text-zinc-400\";\n    return FOLDER_COLORS[folderName] || \"text-zinc-400\";\n  };\n\n  return (\n    <Reorder.Item value={item} id={fullPath} className=\"w-full\">\n      <motion.div\n        className={cn(\n          \"flex items-center gap-2 py-1.5 px-2 text-sm group relative w-full\",\n          isSelected ? \"bg-[#1e1e1e] text-zinc-100\" : \"text-zinc-400\",\n          !isBinary && \"cursor-pointer hover:text-zinc-300\",\n          isBinary && \"cursor-not-allowed opacity-60\",\n          \"after:absolute after:bottom-0 after:left-2 after:right-2 after:h-[1px]\",\n          \"after:bg-gradient-to-r after:from-transparent after:via-zinc-800 after:to-transparent\",\n          \"after:opacity-0 hover:after:opacity-100\",\n          \"transition-all duration-200\"\n        )}\n        style={{ paddingLeft: `${depth * 12 + 8}px` }}\n        onClick={() => {\n          if (item.type === \"directory\") {\n            toggleExpanded(fullPath)\n          } else if (!isBinary) {\n            handleFileOpen(fullPath)\n          }\n        }}\n        transition={{ duration: 0.2 }}\n      >\n        {showIndentGuides && depth > 0 && (\n          <div className=\"absolute left-0 top-0 bottom-0\">\n            {[...Array(depth)].map((_, index) => (\n              <div\n                key={index}\n                className=\"absolute bottom-0 top-0 border-l border-zinc-800\"\n                style={{\n                  left: `${(index + 1) * 12}px`,\n                }}\n              />\n            ))}\n          </div>\n        )}\n        <div className=\"flex items-center gap-2 flex-1\">\n          {(depth > 0 || item.type === \"file\") && (\n            item.type === \"directory\" ? (\n              <motion.div\n                initial={false}\n                animate={{ rotate: isExpanded ? 90 : 0 }}\n                transition={{ duration: 0.2 }}\n              >\n                <Folder className={cn(\"h-4 w-4\", getFolderColor(item.name))} />\n              </motion.div>\n            ) : (\n              <File className={cn(\n                \"h-4 w-4\",\n                isBinary ? \"text-zinc-600\" : getFileIconColor(item.name)\n              )} />\n            )\n          )}\n          <span className={cn(\n            \"truncate text-sm flex-1\",\n            isBinary && \"text-zinc-600\",\n            depth === 0 && \"font-medium\"\n          )}>\n            {depth === 0 ? rootName : item.name}\n            {isBinary && (\n              <span className=\"ml-2 text-xs text-zinc-600 italic\">(Binary file)</span>\n            )}\n          </span>\n        </div>\n      </motion.div>\n      <AnimatePresence initial={false}>\n        {isExpanded && item.children && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: \"auto\", opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.2, ease: [0.04, 0.62, 0.23, 0.98] }}\n          >\n            <Reorder.Group axis=\"y\" values={item.children} onReorder={() => { }}>\n              {item.children.map((child: FileExplorer) => (\n                <FileTree\n                  key={child.name}\n                  item={child}\n                  path={fullPath}\n                  depth={depth + 1}\n                  defaultCollapsed={defaultCollapsed}\n                  handleFileSelect={handleFileSelect}\n                  defaultOpen={defaultOpen}\n                  maxFilesOpen={maxFilesOpen}\n                  folderColor={folderColor}\n                  colorfulIcons={colorfulIcons}\n                  rootName={rootName}\n                  showIndentGuides={showIndentGuides}\n                />\n              ))}\n            </Reorder.Group>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </Reorder.Item>\n  )\n}\n\n// Add SettingsState type (can be imported from settings.tsx)\ntype SettingsState = {\n  theme: 'light' | 'dark' | 'system'\n  colorfulIcons: boolean\n  fontSize: number\n  activeTabColor: 'blue' | 'purple' | 'pink' | 'green' | 'orange'\n  lineNumbers: boolean\n  wordWrap: boolean\n  showIndentGuides: boolean\n}\n\nexport default function IDE({\n  root,\n  onSelect,\n  theme = 'dark',\n  defaultCollapsed = false,\n  defaultOpen = true,\n  maxFilesOpen = 5,\n  folderColor,\n  defaultSelectedPath,\n  colorfulIcons = false,\n  defaultSettings = {},\n  rootName = \"project-root\",\n  showIndentGuides = true,\n}: IDEProps) {\n  // Initialize settings with defaults\n  const [settings, setSettings] = React.useState<SettingsState>({\n    theme: theme,\n    colorfulIcons: colorfulIcons,\n    fontSize: 13,\n    activeTabColor: 'blue',\n    lineNumbers: true,\n    wordWrap: false,\n    showIndentGuides: true,\n    ...defaultSettings,\n  });\n\n  const { selectedPath, openedFiles, setSelectedPath, setOpenedFiles } = useFileStore();\n\n  React.useEffect(() => {\n    if (defaultSelectedPath) {\n      setSelectedPath(defaultSelectedPath);\n    }\n  }, [defaultSelectedPath, setSelectedPath]);\n\n  const handleSettingsChange = (newSettings: { theme?: 'light' | 'dark' | 'system' }) => {\n    if (newSettings.theme) {\n      setSettings(prev => ({ ...prev, theme: newSettings.theme }));\n    }\n  };\n\n  const handleCloseFile = (path: string) => {\n    setOpenedFiles(openedFiles.filter(f => f !== path));\n    if (selectedPath === path) {\n      setSelectedPath(openedFiles[openedFiles.length - 2] || null);\n    }\n  };\n\n  // Function to find file content\n  const findFileContent = (node: FileExplorer, targetPath: string): { content?: string; language?: string } | null => {\n    const nodePath = `/${node.name}`;\n    if (nodePath === targetPath) return { content: node.content, language: node.language };\n\n    if (node.children) {\n      for (const child of node.children) {\n        const result = findFileContent(child, targetPath.replace(nodePath, ''));\n        if (result) return result;\n      }\n    }\n    return null;\n  };\n\n  // Get content of selected file\n  const selectedFile = selectedPath ? findFileContent(root, selectedPath) : null;\n\n  const [sidebarWidth, setSidebarWidth] = React.useState(240);\n  const [isDragging, setIsDragging] = React.useState(false);\n  const [tempWidth, setTempWidth] = React.useState(240);\n\n  // Debounced handler for actual width updates\n  const debouncedSetWidth = useDebouncedCallback(\n    (width: number) => {\n      setSidebarWidth(width);\n    },\n    50 // 50ms delay\n  );\n\n  const handleResize = (_: React.SyntheticEvent, { size }: { size: { width: number; height: number } }) => {\n    setTempWidth(size.width); // Update immediately for visual feedback\n    debouncedSetWidth(size.width); // Debounced actual update\n  };\n\n  // Add mouse follow gradient effect\n  const mouseX = useMotionValue(0)\n  const mouseY = useMotionValue(0)\n\n  const springX = useSpring(mouseX, { damping: 30, stiffness: 200 })\n  const springY = useSpring(mouseY, { damping: 30, stiffness: 200 })\n\n  const handleMouseMove = (e: React.MouseEvent) => {\n    const rect = e.currentTarget.getBoundingClientRect()\n    mouseX.set(e.clientX - rect.left)\n    mouseY.set(e.clientY - rect.top)\n  }\n\n  return (\n    <Card\n      className={cn(\n        \"w-full relative overflow-hidden backdrop-blur-sm rounded-xl\",\n        settings.theme === 'dark' ? \"bg-[#000000] border-[#333333]\" : \"bg-white border-zinc-200\",\n        settings.theme === 'dark' ? \"dark\" : \"light\"\n      )}\n      onMouseMove={handleMouseMove}\n    >\n      {/* Gradient overlay */}\n      <motion.div\n        className={cn(\n          \"absolute inset-0 pointer-events-none opacity-[0.03]\",\n          settings.theme === 'dark' ? \"bg-blue-500\" : \"bg-violet-500\"\n        )}\n        style={{\n          background: settings.theme === 'dark'\n            ? 'radial-gradient(800px circle at var(--mouse-x) var(--mouse-y), rgba(29, 78, 216, 0.06), transparent 80%)'\n            : 'radial-gradient(800px circle at var(--mouse-x) var(--mouse-y), rgba(124, 58, 237, 0.06), transparent 80%)',\n          '--mouse-x': springX,\n          '--mouse-y': springY,\n          zIndex: 0,\n        } as any}\n      />\n\n      {/* Content overlay */}\n      <div\n        className={cn(\n          \"absolute inset-0 pointer-events-none\",\n          settings.theme === 'dark' ? \"bg-black/40\" : \"bg-white/40\"\n        )}\n        style={{ zIndex: 1 }}\n      />\n\n      {/* Main content */}\n      <div className=\"flex h-[600px] relative\" style={{ zIndex: 2 }}>\n        <Resizable\n          width={sidebarWidth}\n          height={600}\n          onResize={handleResize}\n          onResizeStart={() => setIsDragging(true)}\n          onResizeStop={() => setIsDragging(false)}\n          minConstraints={[200, 600]}\n          maxConstraints={[400, 600]}\n          handle={\n            <div className=\"absolute right-0 top-0 bottom-0 w-[2px] cursor-col-resize group z-50\">\n              <div className=\"absolute right-0 top-0 bottom-0 w-[1px] bg-[#333333]/50 group-hover:bg-blue-500/50 transition-colors\" />\n              <div className=\"absolute top-1/2 -translate-y-1/2 right-[-4px] opacity-0 group-hover:opacity-100 transition-all duration-200\">\n                <div className=\"bg-[#1e1e1e] border border-[#333333] rounded-md p-1 shadow-xl\">\n                  <GripVertical size={12} className=\"text-zinc-400 group-hover:text-blue-400 transition-colors\" />\n                </div>\n              </div>\n              <div className=\"absolute inset-0 w-8 -left-3 opacity-0 group-hover:opacity-5 bg-blue-500 transition-opacity duration-200\" />\n            </div>\n          }\n          axis=\"x\"\n          draggableOpts={{\n            enableUserSelectHack: false,\n            grid: [1, 1], // Smoother dragging\n          }}\n        >\n          <div\n            style={{\n              width: isDragging ? tempWidth : sidebarWidth,\n              transform: `translateX(0)`,\n              willChange: 'transform',\n            }}\n            className={cn(\n              \"relative border-r h-full transition-colors duration-200\",\n              settings.theme === 'dark'\n                ? \"border-[#333333]/30 bg-[#000000]\"\n                : \"border-zinc-200/30 bg-white\"\n            )}\n          >\n            <div className=\"absolute top-2 right-2 z-10\">\n              <SettingsPanel\n                settings={settings}\n                onSettingsChange={(newSettings) => setSettings(prev => ({ ...prev, ...newSettings }))}\n              />\n            </div>\n            <ScrollArea className=\"h-[600px]\">\n              <div className=\"p-2 pb-40\">\n                <Reorder.Group axis=\"y\" values={[root]} onReorder={() => { }}>\n                  <FileTree\n                    item={root}\n                    defaultCollapsed={defaultCollapsed}\n                    handleFileSelect={onSelect}\n                    defaultOpen={defaultOpen}\n                    maxFilesOpen={maxFilesOpen}\n                    folderColor=\"text-zinc-400\"\n                    colorfulIcons={settings.colorfulIcons}\n                    rootName={rootName}\n                    showIndentGuides={settings.showIndentGuides}\n                  />\n                </Reorder.Group>\n              </div>\n            </ScrollArea>\n            <div className=\"absolute bottom-0 left-0 right-0 pointer-events-none\">\n              <div className=\"h-[1px] w-full bg-[#333333]/20\" />\n              <div className=\"h-40 bg-gradient-to-t from-black via-black/80 to-transparent\"\n                style={{\n                  backdropFilter: 'blur(4px)',\n                  WebkitMaskImage: 'linear-gradient(to top, black, transparent)',\n                  maskImage: 'linear-gradient(to top, black, transparent)',\n                }}\n              />\n            </div>\n          </div>\n        </Resizable>\n        <div className={cn(\n          \"flex-1\",\n          settings.theme === 'dark' ? \"bg-[#000000]\" : \"bg-white\"\n        )}>\n          {selectedFile?.content ? (\n            <FileViewer\n              content={selectedFile.content}\n              language={selectedFile.language}\n              theme={settings.theme}\n              openedFiles={openedFiles}\n              selectedPath={selectedPath}\n              onCloseFile={handleCloseFile}\n              onSelectFile={setSelectedPath}\n              fontSize={settings.fontSize}\n              activeTabColor={settings.activeTabColor}\n              lineNumbers={settings.lineNumbers}\n              wordWrap={settings.wordWrap}\n            />\n          ) : (\n            <div className=\"flex flex-col items-center justify-center h-full text-zinc-500 space-y-4\">\n              <div className=\"w-16 h-16 rounded-xl bg-zinc-900/50 flex items-center justify-center\">\n                <Code2 size={24} className=\"text-zinc-600\" />\n              </div>\n              <div className=\"text-center space-y-1\">\n                <p className=\"text-sm font-medium\">No file selected</p>\n                <p className=\"text-xs text-zinc-600\">Select a file from the sidebar to view its contents</p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Card>\n  );\n}\n",
							language: 'typescript'
						},
						{
							name: 'settings.tsx',
							type: 'file',
							content:
								'"use client";\n\nimport * as PopoverPrimitive from \'@radix-ui/react-popover\';\nimport * as Tooltip from \'@radix-ui/react-tooltip\';\nimport { motion, useDragControls } from \'framer-motion\';\nimport { Moon, Palette, Settings, Smartphone, Sun, Type, X } from \'lucide-react\';\nimport { cn } from \'../../lib/utils\';\n\ntype SettingsState = {\n    theme: \'light\' | \'dark\' | \'system\';\n    colorfulIcons: boolean;\n    fontSize: number;\n    activeTabColor: \'blue\' | \'purple\' | \'pink\' | \'green\' | \'orange\';\n    lineNumbers: boolean;\n    wordWrap: boolean;\n}\n\ntype SettingsPanelProps = {\n    settings: SettingsState;\n    onSettingsChange: (newSettings: Partial<SettingsState>) => void;\n}\n\nconst TAB_COLORS = {\n    blue: \'before:bg-blue-400\',\n    purple: \'before:bg-purple-400\',\n    pink: \'before:bg-pink-400\',\n    green: \'before:bg-green-400\',\n    orange: \'before:bg-orange-400\',\n} as const;\n\nconst CustomTooltip = ({ content, children }) => {\n    return (\n        <Tooltip.Provider>\n            <Tooltip.Root>\n                <Tooltip.Trigger asChild>\n                    {children}\n                </Tooltip.Trigger>\n                <Tooltip.Portal>\n                    <Tooltip.Content\n                        className={cn(\n                            "bg-gray-800 text-white text-sm rounded-md p-2 shadow-lg",\n                            "transition-opacity duration-200 ease-in-out",\n                            "data-state=\'visible\':opacity-100",\n                            "data-state=\'hidden\':opacity-0"\n                        )}\n                        side="top"\n                        align="center"\n                        sideOffset={5}\n                    >\n                        {content}\n                        <Tooltip.Arrow className="fill-gray-800" />\n                    </Tooltip.Content>\n                </Tooltip.Portal>\n            </Tooltip.Root>\n        </Tooltip.Provider>\n    );\n};\n\nexport default function SettingsPanel({ settings, onSettingsChange }: SettingsPanelProps) {\n    const dragControls = useDragControls()\n\n    const themeOptions = [\n        { value: \'light\' as const, icon: Sun, label: \'Light\' },\n        { value: \'dark\' as const, icon: Moon, label: \'Dark\' },\n        { value: \'system\' as const, icon: Smartphone, label: \'System\' },\n    ];\n\n    const fontSizes = [12, 13, 14, 15, 16];\n    const tabColors = Object.keys(TAB_COLORS) as Array<keyof typeof TAB_COLORS>;\n\n    return (\n        <PopoverPrimitive.Root>\n            <PopoverPrimitive.Trigger asChild>\n                <button className="p-2 rounded-full hover:bg-zinc-800/50 transition-colors">\n                    <Settings size={16} className="text-zinc-400 hover:text-zinc-300" />\n                </button>\n            </PopoverPrimitive.Trigger>\n            <PopoverPrimitive.Portal>\n                <PopoverPrimitive.Content asChild>\n                    <motion.div\n                        className="fixed z-50"\n                        initial={{ opacity: 0, scale: 0.95 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        exit={{ opacity: 0, scale: 0.95 }}\n                        drag\n                        dragControls={dragControls}\n                        dragMomentum={false}\n                        dragElastic={0}\n                    >\n                        <motion.div\n                            className="w-80 rounded-lg border border-zinc-800 bg-zinc-900/95 p-4 cursor-move"\n                            onPointerDown={(e) => dragControls.start(e)}\n                        >\n                            <div className="flex items-center justify-between mb-4">\n                                <h3 className="text-sm font-medium text-zinc-200">Editor Settings</h3>\n                                <CustomTooltip content="Tip! You can move/drag this panel if it is covering the results of your configuration">\n                                    <button className="rounded-full p-1 hover:bg-zinc-800/50 transition-colors">\n                                        <X size={14} className="text-zinc-400" />\n                                    </button>\n                                </CustomTooltip>\n                            </div>\n                            <div className="space-y-6">\n                                {/* Theme Selection */}\n                                <div className="space-y-2">\n                                    <label className="text-xs font-medium text-zinc-400 flex items-center gap-2">\n                                        <Sun className="w-3 h-3" /> Theme\n                                    </label>\n                                    <div className="grid grid-cols-3 gap-2">\n                                        {themeOptions.map(({ value, icon: Icon, label }) => (\n                                            <button\n                                                key={value}\n                                                onClick={() => onSettingsChange({ theme: value })}\n                                                className={cn(\n                                                    "flex flex-col items-center gap-1 p-2 rounded-md border transition-all",\n                                                    settings.theme === value\n                                                        ? "border-blue-500/50 bg-blue-500/10 text-blue-400"\n                                                        : "border-zinc-800 hover:border-zinc-700 text-zinc-400 hover:text-zinc-300"\n                                                )}\n                                            >\n                                                <Icon size={14} />\n                                                <span className="text-xs">{label}</span>\n                                            </button>\n                                        ))}\n                                    </div>\n                                </div>\n\n                                {/* Font Size */}\n                                <div className="space-y-2">\n                                    <label className="text-xs font-medium text-zinc-400 flex items-center gap-2">\n                                        <Type className="w-3 h-3" /> Font Size\n                                    </label>\n                                    <div className="grid grid-cols-5 gap-2">\n                                        {fontSizes.map((size) => (\n                                            <button\n                                                key={size}\n                                                onClick={() => onSettingsChange({ fontSize: size })}\n                                                className={cn(\n                                                    "p-2 rounded-md border text-xs transition-all",\n                                                    settings.fontSize === size\n                                                        ? "border-blue-500/50 bg-blue-500/10 text-blue-400"\n                                                        : "border-zinc-800 hover:border-zinc-700 text-zinc-400 hover:text-zinc-300"\n                                                )}\n                                            >\n                                                {size}px\n                                            </button>\n                                        ))}\n                                    </div>\n                                </div>\n\n                                {/* Tab Color */}\n                                <div className="space-y-2">\n                                    <label className="text-xs font-medium text-zinc-400 flex items-center gap-2">\n                                        <Palette className="w-3 h-3" /> Active Tab Color\n                                    </label>\n                                    <div className="grid grid-cols-5 gap-2">\n                                        {tabColors.map((color) => (\n                                            <button\n                                                key={color}\n                                                onClick={() => onSettingsChange({ activeTabColor: color })}\n                                                className={cn(\n                                                    "p-2 rounded-md border text-xs transition-all capitalize",\n                                                    settings.activeTabColor === color\n                                                        ? `border-${color}-500/50 bg-${color}-500/10 text-${color}-400`\n                                                        : "border-zinc-800 hover:border-zinc-700 text-zinc-400 hover:text-zinc-300"\n                                                )}\n                                            >\n                                                {color}\n                                            </button>\n                                        ))}\n                                    </div>\n                                </div>\n\n                                {/* Toggle Options */}\n                                <div className="space-y-2">\n                                    <label className="text-xs font-medium text-zinc-400">Display Options</label>\n                                    <div className="space-y-2">\n                                        <button\n                                            onClick={() => onSettingsChange({ colorfulIcons: !settings.colorfulIcons })}\n                                            className={cn(\n                                                "w-full flex items-center justify-between p-2 rounded-md border transition-all",\n                                                settings.colorfulIcons\n                                                    ? "border-blue-500/50 bg-blue-500/10 text-blue-400"\n                                                    : "border-zinc-800 hover:border-zinc-700 text-zinc-400 hover:text-zinc-300"\n                                            )}\n                                        >\n                                            <span className="text-xs">Colorful Icons</span>\n                                        </button>\n                                        <button\n                                            onClick={() => onSettingsChange({ lineNumbers: !settings.lineNumbers })}\n                                            className={cn(\n                                                "w-full flex items-center justify-between p-2 rounded-md border transition-all",\n                                                settings.lineNumbers\n                                                    ? "border-blue-500/50 bg-blue-500/10 text-blue-400"\n                                                    : "border-zinc-800 hover:border-zinc-700 text-zinc-400 hover:text-zinc-300"\n                                            )}\n                                        >\n                                            <span className="text-xs">Show Line Numbers</span>\n                                        </button>\n                                        <button\n                                            onClick={() => onSettingsChange({ wordWrap: !settings.wordWrap })}\n                                            className={cn(\n                                                "w-full flex items-center justify-between p-2 rounded-md border transition-all",\n                                                settings.wordWrap\n                                                    ? "border-blue-500/50 bg-blue-500/10 text-blue-400"\n                                                    : "border-zinc-800 hover:border-zinc-700 text-zinc-400 hover:text-zinc-300"\n                                            )}\n                                        >\n                                            <span className="text-xs">Word Wrap</span>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </motion.div>\n                    </motion.div>\n                </PopoverPrimitive.Content>\n            </PopoverPrimitive.Portal>\n        </PopoverPrimitive.Root>\n    );\n}\n',
							language: 'typescript'
						}
					]
				}
			]
		}
	]
}
